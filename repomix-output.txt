This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T09:48:56.171Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.bolt/
  config.json
  prompt
src/
  api/
    ai/
      analyze.ts
      completion.ts
      generate.ts
  components/
    ai/
      chat/
        ChatHeader.tsx
        ChatInput.tsx
        ChatMessage.tsx
      AIAssistant.tsx
      AIFeedback.tsx
      AIProgress.tsx
      Message.tsx
      MessageInput.tsx
      ProcessingIndicator.tsx
    audit/
      AuditResults.tsx
      CodeEditor.tsx
      ContractSelector.tsx
    community/
      AdvertiseModal.tsx
      IDOCard.tsx
      IDOSection.tsx
    dashboard/
      ActivityFeed.tsx
      ActivityItem.tsx
      NewProjectModal.tsx
      ProjectCard.tsx
      ProjectList.tsx
      QuickAction.tsx
      ResourceLink.tsx
      ResourceLinks.tsx
    features/
      FeatureCard.tsx
      FeatureGrid.tsx
    hero/
      FloatingElements.tsx
      HeroActions.tsx
      HeroBackground.tsx
      HeroLogo.tsx
      HeroSubtitle.tsx
      HeroTitle.tsx
      Robot3D.tsx
    launch/
      Analytics.tsx
      BlockchainSelector.tsx
      LaunchRequirements.tsx
      SocialConnector.tsx
    modals/
      ResourceModal.tsx
    project/
      ProjectOverview.tsx
      TeamManagement.tsx
    token/
      ContractTemplates.tsx
      SecurityFeatures.tsx
      StoredContracts.tsx
      TokenBuilderForm.tsx
      TokenManagement.tsx
      TokenomicsBuilder.tsx
      VestingSchedule.tsx
      WhitePaperGenerator.tsx
    ui/
      Button.tsx
    ApplicationProcess.tsx
    ApplyForm.tsx
    CTA.tsx
    Features.tsx
    Hero.tsx
    Navbar.tsx
    Pricing.tsx
    ProjectContext.tsx
    ProjectSelector.tsx
    ProtectedRoute.tsx
    Stats.tsx
    Testimonials.tsx
    WalletApproval.tsx
  hooks/
    useProjectProgress.ts
  lib/
    ai/
      hooks/
        useAIChat.ts
        useSmartContractAI.ts
        useTokenomicsAI.ts
        useWhitepaperAI.ts
      services/
        AIService.ts
        ContractGenerationService.ts
      AIContext.tsx
      AIProvider.tsx
      helpers.ts
      prompts.ts
      types.ts
      useAI.ts
    constants/
      features.ts
      pricing.ts
      stats.ts
      testimonials.ts
    hooks/
      useCurrentProject.ts
      useWalletAuth.ts
    routes/
      ProtectedRoute.tsx
    store/
      useActivityStore.ts
      useAuthStore.ts
      useCurrentProjectStore.ts
      useProjectStore.ts
      useSocialStore.ts
    utils.ts
    web3.ts
  pages/
    Community.tsx
    Dashboard.tsx
    LandingPage.tsx
    Launch.tsx
    ProjectManager.tsx
    SmartContractAuditor.tsx
    TokenBuilder.tsx
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vercel.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .bolt/config.json
================
{
  "template": "bolt-vite-react-ts"
}

================
File: .bolt/prompt
================
For all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.

By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.

Use icons from lucide-react for logos.

Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.

================
File: src/api/ai/analyze.ts
================
```typescript
import OpenAI from 'openai';
import { OpenAIStream, StreamingTextResponse } from 'ai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const runtime = 'edge';

export async function POST(req: Request) {
  const { code, type } = await req.json();

  const systemPrompts = {
    security: `Analyze this smart contract for security vulnerabilities. Focus on:
      1. Reentrancy vulnerabilities
      2. Integer overflow/underflow
      3. Access control issues
      4. Gas limitations
      5. Front-running possibilities`,
    gas: `Analyze this smart contract for gas optimization opportunities. Focus on:
      1. Storage optimization
      2. Loop optimization
      3. Function optimization
      4. State variable access patterns`,
    audit: `Perform a comprehensive smart contract audit. Include:
      1. Security vulnerabilities
      2. Gas optimization
      3. Code quality
      4. Best practices
      5. Documentation completeness`
  };

  const response = await openai.chat.completions.create({
    model: 'gpt-4-turbo-preview',
    stream: true,
    messages: [
      {
        role: 'system',
        content: systemPrompts[type as keyof typeof systemPrompts]
      },
      {
        role: 'user',
        content: code
      }
    ],
    temperature: 0.3,
    max_tokens: 4000,
  });

  const stream = OpenAIStream(response);
  return new StreamingTextResponse(stream);
}
```

================
File: src/api/ai/completion.ts
================
```typescript
import OpenAI from 'openai';
import { OpenAIStream, StreamingTextResponse } from 'ai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const runtime = 'edge';

export async function POST(req: Request) {
  const { prompt, projectContext } = await req.json();

  const response = await openai.chat.completions.create({
    model: 'gpt-4-turbo-preview',
    stream: true,
    messages: [
      {
        role: 'system',
        content: `You are an AI assistant specialized in blockchain development, smart contracts, and tokenomics. 
        You help developers create secure and efficient smart contracts, analyze tokenomics, and generate technical documentation.
        ${projectContext ? `Current project context: ${JSON.stringify(projectContext)}` : ''}`
      },
      {
        role: 'user',
        content: prompt
      }
    ],
    temperature: 0.7,
    max_tokens: 4000,
  });

  const stream = OpenAIStream(response);
  return new StreamingTextResponse(stream);
}
```

================
File: src/api/ai/generate.ts
================
```typescript
import OpenAI from 'openai';
import { OpenAIStream, StreamingTextResponse } from 'ai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const runtime = 'edge';

export async function POST(req: Request) {
  const { type, requirements, projectContext } = await req.json();

  const systemPrompts = {
    contract: `Generate a secure and optimized smart contract based on the following requirements.
      Include:
      1. Full implementation
      2. Security features
      3. Gas optimization
      4. Events and modifiers
      5. Detailed comments`,
    whitepaper: `Generate a comprehensive whitepaper for this blockchain project.
      Include:
      1. Executive Summary
      2. Problem Statement
      3. Technical Architecture
      4. Tokenomics
      5. Roadmap`,
    tokenomics: `Create a detailed tokenomics model based on the requirements.
      Include:
      1. Token distribution
      2. Vesting schedules
      3. Token utility
      4. Economic analysis`
  };

  const response = await openai.chat.completions.create({
    model: 'gpt-4-turbo-preview',
    stream: true,
    messages: [
      {
        role: 'system',
        content: `${systemPrompts[type as keyof typeof systemPrompts]}
          ${projectContext ? `Project context: ${JSON.stringify(projectContext)}` : ''}`
      },
      {
        role: 'user',
        content: requirements
      }
    ],
    temperature: 0.5,
    max_tokens: 4000,
  });

  const stream = OpenAIStream(response);
  return new StreamingTextResponse(stream);
}
```

================
File: src/components/ai/chat/ChatHeader.tsx
================
import React from 'react';
import { Bot, X } from 'lucide-react';

interface ChatHeaderProps {
  onClose: () => void;
}

const ChatHeader: React.FC<ChatHeaderProps> = ({ onClose }) => {
  return (
    <div className="flex items-center justify-between p-4 border-b border-purple-900/20">
      <div className="flex items-center space-x-2">
        <Bot className="w-5 h-5 text-purple-500" />
        <span className="font-semibold">AI Assistant</span>
      </div>
      <button onClick={onClose} className="text-gray-400 hover:text-white">
        <X className="w-5 h-5" />
      </button>
    </div>
  );
};

export default ChatHeader;

================
File: src/components/ai/chat/ChatInput.tsx
================
import React, { useState } from 'react';
import { Send } from 'lucide-react';
import Button from '../../ui/Button';

interface ChatInputProps {
  onSend: (message: string) => void;
  isProcessing: boolean;
}

const ChatInput: React.FC<ChatInputProps> = ({ onSend, isProcessing }) => {
  const [input, setInput] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isProcessing) return;
    
    onSend(input.trim());
    setInput('');
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 border-t border-purple-900/20">
      <div className="flex space-x-2">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Ask me anything..."
          className="flex-1 bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
        />
        <Button type="submit" disabled={isProcessing || !input.trim()}>
          <Send className="w-4 h-4" />
        </Button>
      </div>
    </form>
  );
};

export default ChatInput;

================
File: src/components/ai/chat/ChatMessage.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import type { AIMessage } from '../../../lib/ai/types';

interface ChatMessageProps {
  message: AIMessage;
}

const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {
  const isUser = message.role === 'user';

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}
    >
      <div
        className={`max-w-[80%] rounded-lg p-3 ${
          isUser
            ? 'bg-purple-600 text-white'
            : 'bg-zinc-800 text-gray-300'
        }`}
      >
        {message.content}
      </div>
    </motion.div>
  );
};

export default ChatMessage;

================
File: src/components/ai/AIAssistant.tsx
================
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAIChat } from '../../lib/ai/hooks/useAIChat';
import ChatHeader from './chat/ChatHeader';
import ChatMessage from './chat/ChatMessage';
import ChatInput from './chat/ChatInput';
import ProcessingIndicator from './ProcessingIndicator';

interface AIAssistantProps {
  isOpen: boolean;
  onClose: () => void;
}

const AIAssistant: React.FC<AIAssistantProps> = ({ isOpen, onClose }) => {
  const { messages, addMessage, isProcessing } = useAIChat();

  const handleSendMessage = async (content: string) => {
    try {
      await addMessage(content);
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className="fixed bottom-4 right-4 w-96 bg-zinc-900 rounded-lg shadow-xl border border-purple-900/20"
        >
          <ChatHeader onClose={onClose} />

          <div className="h-96 overflow-y-auto p-4 space-y-4">
            {messages.map((message, index) => (
              <ChatMessage key={index} message={message} />
            ))}
            {isProcessing && <ProcessingIndicator />}
          </div>

          <ChatInput onSend={handleSendMessage} isProcessing={isProcessing} />
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AIAssistant;

================
File: src/components/ai/AIFeedback.tsx
================
```typescript
import React from 'react';
import { motion } from 'framer-motion';
import { AlertTriangle, CheckCircle, Info } from 'lucide-react';

interface AIFeedbackProps {
  type: 'success' | 'warning' | 'info';
  message: string;
  details?: string[];
}

const AIFeedback = ({ type, message, details }: AIFeedbackProps) => {
  const icons = {
    success: CheckCircle,
    warning: AlertTriangle,
    info: Info
  };

  const colors = {
    success: 'text-green-500 bg-green-900/20 border-green-500/20',
    warning: 'text-yellow-500 bg-yellow-900/20 border-yellow-500/20',
    info: 'text-blue-500 bg-blue-900/20 border-blue-500/20'
  };

  const Icon = icons[type];

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`rounded-lg p-4 ${colors[type]} border`}
    >
      <div className="flex items-start space-x-3">
        <Icon className="w-5 h-5 mt-0.5" />
        <div>
          <p className="font-medium">{message}</p>
          {details && details.length > 0 && (
            <ul className="mt-2 space-y-1 text-sm">
              {details.map((detail, index) => (
                <li key={index}>{detail}</li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export default AIFeedback;
```

================
File: src/components/ai/AIProgress.tsx
================
```typescript
import React from 'react';
import { motion } from 'framer-motion';
import { Loader } from 'lucide-react';

interface AIProgressProps {
  message: string;
  progress?: number;
}

const AIProgress = ({ message, progress }: AIProgressProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="flex flex-col items-center justify-center p-6 space-y-4"
    >
      <div className="relative">
        <Loader className="w-8 h-8 text-purple-500 animate-spin" />
        {progress !== undefined && (
          <div className="absolute inset-0 flex items-center justify-center">
            <span className="text-xs font-medium">{Math.round(progress)}%</span>
          </div>
        )}
      </div>
      <p className="text-gray-400 text-center">{message}</p>
    </motion.div>
  );
};

export default AIProgress;
```

================
File: src/components/ai/Message.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

interface MessageProps {
  role: 'user' | 'assistant';
  content: string;
}

const Message: React.FC<MessageProps> = ({ role, content }) => {
  return (
    <div className={role === 'user' ? 'flex justify-end' : 'flex justify-start'}>
      <div
        className={`max-w-[80%] rounded-lg p-3 ${
          role === 'user'
            ? 'bg-purple-600 text-white'
            : 'bg-zinc-800 text-gray-300'
        }`}
      >
        {content}
      </div>
    </div>
  );
};

export default Message;

================
File: src/components/ai/MessageInput.tsx
================
import React from 'react';
import { Send } from 'lucide-react';
import Button from '../ui/Button';

interface MessageInputProps {
  input: string;
  onChange: (value: string) => void;
  onSubmit: (e: React.FormEvent) => void;
  isProcessing: boolean;
}

const MessageInput: React.FC<MessageInputProps> = ({
  input,
  onChange,
  onSubmit,
  isProcessing
}) => {
  return (
    <form onSubmit={onSubmit} className="p-4 border-t border-purple-900/20">
      <div className="flex space-x-2">
        <input
          type="text"
          value={input}
          onChange={(e) => onChange(e.target.value)}
          placeholder="Ask me anything..."
          className="flex-1 bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
        />
        <Button type="submit" disabled={isProcessing || !input.trim()}>
          <Send className="w-4 h-4" />
        </Button>
      </div>
    </form>
  );
};

export default MessageInput;

================
File: src/components/ai/ProcessingIndicator.tsx
================
import React from 'react';
import { Loader } from 'lucide-react';

const ProcessingIndicator: React.FC = () => {
  return (
    <div className="flex justify-start">
      <div className="bg-zinc-800 rounded-lg p-3 flex items-center space-x-2">
        <Loader className="w-4 h-4 animate-spin" />
        <span>Processing...</span>
      </div>
    </div>
  );
};

export default ProcessingIndicator;

================
File: src/components/audit/AuditResults.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { AlertTriangle, CheckCircle, Zap } from 'lucide-react';

interface Vulnerability {
  severity: 'high' | 'medium' | 'low';
  description: string;
  location?: string;
  recommendation: string;
}

interface Optimization {
  type: string;
  description: string;
  impact: string;
  recommendation: string;
}

interface AuditResultsProps {
  results: {
    vulnerabilities: Vulnerability[];
    optimizations: Optimization[];
    score: number;
  };
}

const AuditResults: React.FC<AuditResultsProps> = ({ results }) => {
  if (!results) return null;

  const { vulnerabilities = [], optimizations = [], score = 0 } = results;

  return (
    <>
      {/* Security Score */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
      >
        <div className="text-center">
          <h3 className="text-xl font-bold mb-2">Security Score</h3>
          <div className="text-4xl font-bold text-purple-500 mb-2">{score}%</div>
          <div className={`text-sm ${
            score >= 90 ? 'text-green-500' :
            score >= 70 ? 'text-yellow-500' :
            'text-red-500'
          }`}>
            {score >= 90 ? 'Excellent' :
             score >= 70 ? 'Good' :
             'Needs Improvement'}
          </div>
        </div>
      </motion.div>

      {/* Vulnerabilities */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
      >
        <h2 className="text-xl font-bold mb-6 flex items-center">
          <AlertTriangle className="w-5 h-5 mr-2 text-yellow-500" />
          Vulnerabilities
        </h2>
        <div className="space-y-4">
          {vulnerabilities.length === 0 ? (
            <div className="text-center py-4 text-gray-400">
              No vulnerabilities detected
            </div>
          ) : (
            vulnerabilities.map((issue, index) => (
              <div
                key={index}
                className={`p-4 bg-black/30 rounded-lg border ${
                  issue.severity === 'high' ? 'border-red-500/20' :
                  issue.severity === 'medium' ? 'border-yellow-500/20' :
                  'border-blue-500/20'
                }`}
              >
                <div className="flex items-center justify-between mb-2">
                  <span className={`font-semibold ${
                    issue.severity === 'high' ? 'text-red-500' :
                    issue.severity === 'medium' ? 'text-yellow-500' :
                    'text-blue-500'
                  }`}>{issue.description}</span>
                  <span className="text-sm text-gray-400 capitalize">{issue.severity} Risk</span>
                </div>
                {issue.location && (
                  <div className="text-sm text-gray-400 mb-2">
                    Location: {issue.location}
                  </div>
                )}
                <div className="text-sm text-gray-300">
                  {issue.recommendation}
                </div>
              </div>
            ))
          )}
        </div>
      </motion.div>

      {/* Optimizations */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
      >
        <h2 className="text-xl font-bold mb-6 flex items-center">
          <Zap className="w-5 h-5 mr-2 text-green-500" />
          Optimization Suggestions
        </h2>
        <div className="space-y-4">
          {optimizations.length === 0 ? (
            <div className="text-center py-4 text-gray-400">
              No optimization suggestions found
            </div>
          ) : (
            optimizations.map((opt, index) => (
              <div
                key={index}
                className="p-4 bg-black/30 rounded-lg border border-green-500/20"
              >
                <div className="flex items-center justify-between mb-2">
                  <span className="font-semibold text-green-500">{opt.type}</span>
                  <span className="text-sm text-gray-400">Impact: {opt.impact}</span>
                </div>
                <p className="text-sm text-gray-300 mb-2">{opt.description}</p>
                <p className="text-sm text-gray-400">{opt.recommendation}</p>
              </div>
            ))
          )}
        </div>
      </motion.div>
    </>
  );
};

export default AuditResults;

================
File: src/components/audit/CodeEditor.tsx
================
import React from 'react';

interface CodeEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

const CodeEditor: React.FC<CodeEditorProps> = ({ value, onChange, placeholder }) => {
  return (
    <div className="relative">
      <textarea
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        className="w-full h-96 bg-black/30 rounded-lg p-4 font-mono text-sm text-gray-300 placeholder-gray-500 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-colors resize-none"
      />
      <div className="absolute top-2 right-2 text-xs text-gray-500">
        Solidity
      </div>
    </div>
  );
};

export default CodeEditor;

================
File: src/components/audit/ContractSelector.tsx
================
import React from 'react';
import { FileCode2 } from 'lucide-react';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

interface ContractSelectorProps {
  onSelect: (code: string) => void;
}

const ContractSelector: React.FC<ContractSelectorProps> = ({ onSelect }) => {
  const { currentProject } = useCurrentProject();
  const contracts = currentProject?.contracts || [];

  if (contracts.length === 0) return null;

  return (
    <div className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
      <h2 className="text-xl font-bold mb-4 flex items-center">
        <FileCode2 className="w-5 h-5 mr-2 text-purple-500" />
        Project Contracts
      </h2>
      <div className="space-y-2">
        {contracts.map((contract) => (
          <button
            key={contract.id}
            onClick={() => onSelect(contract.code)}
            className="w-full text-left p-3 rounded-lg hover:bg-purple-900/20 transition-colors flex items-center justify-between"
          >
            <span>{contract.name}</span>
            <span className="text-sm text-gray-400">
              {new Date(contract.createdAt).toLocaleDateString()}
            </span>
          </button>
        ))}
      </div>
    </div>
  );
};

export default ContractSelector;

================
File: src/components/community/AdvertiseModal.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Calendar, Rocket, AlertCircle } from 'lucide-react';
import { useAccount, useBalance, useContractWrite } from 'wagmi';
import Button from '../ui/Button';
import { useProjectStore } from '../../lib/store/useProjectStore';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

const LISTING_FEE = 0.1; // ETH

const AdvertiseModal = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => {
  const { address } = useAccount();
  const { currentProject } = useCurrentProject();
  const { updateProject } = useProjectStore();
  const [launchDate, setLaunchDate] = useState('');

  const { data: balance } = useBalance({
    address,
  });

  const hasEnoughBalance = balance?.value && Number(balance.value) >= LISTING_FEE;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!currentProject) return;

    // In a real implementation, this would handle the crypto payment
    // and update the project's featured status
    updateProject(currentProject.id, {
      isFeatured: true,
      launchDate,
    });

    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="bg-zinc-900 rounded-2xl p-6 w-full max-w-md border border-purple-900/20"
          >
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">Advertise Your Launch</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white">
                <X className="w-6 h-6" />
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <label className="text-sm text-gray-400">Launch Date</label>
                <input
                  type="datetime-local"
                  required
                  value={launchDate}
                  onChange={(e) => setLaunchDate(e.target.value)}
                  className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
                />
              </div>

              <div className="p-4 bg-purple-900/20 rounded-lg space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span>Listing Fee</span>
                  <span className="font-bold">{LISTING_FEE} ETH</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Your Balance</span>
                  <span>{balance?.formatted || '0'} ETH</span>
                </div>
              </div>

              {!hasEnoughBalance && (
                <div className="flex items-center p-4 bg-red-900/20 rounded-lg text-red-400">
                  <AlertCircle className="w-5 h-5 mr-2" />
                  Insufficient balance to pay listing fee
                </div>
              )}

              <div className="flex gap-4">
                <Button
                  type="submit"
                  variant="primary"
                  className="flex-1"
                  disabled={!hasEnoughBalance}
                >
                  <Rocket className="w-4 h-4 mr-2" />
                  List Project
                </Button>
                <Button type="button" variant="outline" onClick={onClose}>
                  Cancel
                </Button>
              </div>
            </form>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default AdvertiseModal;

================
File: src/components/community/IDOCard.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Calendar, Users, Coins, Timer, ArrowUpRight } from 'lucide-react';
import Button from '../ui/Button';
import { formatEther, parseEther } from 'viem';
import { useContractWrite } from 'wagmi';

interface IDOCardProps {
  project: {
    id: string;
    name: string;
    description: string;
    image?: string;
    status: string;
    tokenPrice: string;
    softCap: string;
    hardCap: string;
    minContribution: string;
    maxContribution: string;
    startTime: string;
    endTime: string;
    totalRaised: string;
    participants: number;
    tags?: string[];
  };
  index: number;
}

const IDOCard = ({ project, index }: IDOCardProps) => {
  const progress = (Number(project.totalRaised) / Number(project.hardCap)) * 100;
  const timeLeft = new Date(project.endTime).getTime() - Date.now();
  const isLive = timeLeft > 0 && Date.now() >= new Date(project.startTime).getTime();

  const { write: participate } = useContractWrite({
    // In a real implementation, this would be the actual IDO contract
    address: '0x...',
    abi: [],
    functionName: 'participate',
  });

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      className="bg-zinc-900/50 rounded-xl border border-purple-900/20 overflow-hidden hover:border-purple-600/50 transition-colors"
    >
      <div className="relative">
        <img
          src={project.image || 'https://images.unsplash.com/photo-1639762681485-074b7f938ba0?auto=format&fit=crop&w=400&h=300'}
          alt={project.name}
          className="w-full h-48 object-cover"
        />
        <div className="absolute top-4 right-4">
          <span className={`px-3 py-1 rounded-full text-sm ${
            isLive ? 'bg-green-600' : 'bg-purple-600'
          }`}>
            {isLive ? 'Live' : project.status}
          </span>
        </div>
      </div>
      
      <div className="p-6">
        <h3 className="text-xl font-bold mb-2">{project.name}</h3>
        <p className="text-gray-400 mb-4">{project.description}</p>
        
        <div className="flex flex-wrap gap-2 mb-4">
          {project.tags?.map((tag, tagIndex) => (
            <span
              key={tagIndex}
              className="px-2 py-1 rounded-md bg-purple-900/30 text-purple-400 text-sm"
            >
              {tag}
            </span>
          ))}
        </div>

        <div className="space-y-4 mb-6">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-400">Progress</span>
            <span className="font-bold">{progress.toFixed(2)}%</span>
          </div>
          <div className="h-2 bg-zinc-800 rounded-full">
            <div
              className="h-2 bg-purple-500 rounded-full"
              style={{ width: `${progress}%` }}
            />
          </div>
          <div className="flex items-center justify-between text-sm text-gray-400">
            <span>{formatEther(BigInt(project.totalRaised))} ETH raised</span>
            <span>{formatEther(BigInt(project.hardCap))} ETH goal</span>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="p-3 bg-black/30 rounded-lg">
            <div className="text-sm text-gray-400">Token Price</div>
            <div className="font-bold">{project.tokenPrice} ETH</div>
          </div>
          <div className="p-3 bg-black/30 rounded-lg">
            <div className="text-sm text-gray-400">Min/Max</div>
            <div className="font-bold">
              {formatEther(BigInt(project.minContribution))}/{formatEther(BigInt(project.maxContribution))} ETH
            </div>
          </div>
        </div>

        <div className="flex items-center justify-between text-sm text-gray-400 mb-6">
          <div className="flex items-center">
            <Timer className="w-4 h-4 mr-1" />
            {timeLeft > 0 ? `${Math.ceil(timeLeft / (1000 * 60 * 60 * 24))} days left` : 'Ended'}
          </div>
          <div className="flex items-center">
            <Users className="w-4 h-4 mr-1" />
            {project.participants} participants
          </div>
          <div className="flex items-center">
            <Coins className="w-4 h-4 mr-1" />
            Min. {formatEther(BigInt(project.minContribution))} ETH
          </div>
        </div>

        <Button
          variant="primary"
          className="w-full"
          disabled={!isLive}
          onClick={() => participate()}
        >
          {isLive ? 'Participate in IDO' : 'Coming Soon'}
          <ArrowUpRight className="w-4 h-4 ml-2" />
        </Button>
      </div>
    </motion.div>
  );
};

export default IDOCard;

================
File: src/components/community/IDOSection.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Rocket } from 'lucide-react';
import IDOCard from './IDOCard';
import { parseEther } from 'viem';

const mockIDOs = [
  {
    id: '1',
    name: 'DeFi Revolution Protocol',
    description: 'Next-generation DeFi protocol with AI-powered yield optimization',
    status: 'Upcoming',
    tokenPrice: '0.001',
    softCap: parseEther('50').toString(),
    hardCap: parseEther('200').toString(),
    minContribution: parseEther('0.1').toString(),
    maxContribution: parseEther('5').toString(),
    startTime: new Date(Date.now() + 86400000).toISOString(), // Tomorrow
    endTime: new Date(Date.now() + 604800000).toISOString(), // 7 days from now
    totalRaised: parseEther('25').toString(),
    participants: 150,
    tags: ['DeFi', 'AI', 'Yield'],
  },
  {
    id: '2',
    name: 'GameFi Metaverse',
    description: 'Revolutionary gaming platform with play-to-earn mechanics',
    status: 'Live',
    tokenPrice: '0.002',
    softCap: parseEther('100').toString(),
    hardCap: parseEther('500').toString(),
    minContribution: parseEther('0.2').toString(),
    maxContribution: parseEther('10').toString(),
    startTime: new Date(Date.now() - 86400000).toISOString(), // Yesterday
    endTime: new Date(Date.now() + 432000000).toISOString(), // 5 days from now
    totalRaised: parseEther('150').toString(),
    participants: 300,
    tags: ['GameFi', 'Metaverse', 'NFT'],
  }
];

const IDOSection = () => {
  return (
    <section className="mb-16">
      <h2 className="text-2xl font-bold mb-8 flex items-center">
        <Rocket className="w-5 h-5 mr-2 text-purple-500" />
        Active IDOs
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {mockIDOs.map((ido, index) => (
          <IDOCard key={ido.id} project={ido} index={index} />
        ))}
      </div>
    </section>
  );
};

export default IDOSection;

================
File: src/components/dashboard/ActivityFeed.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { useActivityStore } from '../../lib/store/useActivityStore';
import ActivityItem from './ActivityItem';
import { Shield, FileText, Rocket, Users } from 'lucide-react';

const getActivityIcon = (type: string) => {
  switch (type) {
    case 'audit':
      return <Shield className="w-4 h-4" />;
    case 'document':
      return <FileText className="w-4 h-4" />;
    case 'launch':
      return <Rocket className="w-4 h-4" />;
    case 'team':
      return <Users className="w-4 h-4" />;
    default:
      return <FileText className="w-4 h-4" />;
  }
};

const formatTime = (timestamp: number) => {
  const now = Date.now();
  const diff = now - timestamp;
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 0) return `${days} days ago`;
  if (hours > 0) return `${hours} hours ago`;
  if (minutes > 0) return `${minutes} minutes ago`;
  return 'Just now';
};

const ActivityFeed = () => {
  const activities = useActivityStore((state) => state.activities);

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-2xl font-bold mb-6">Recent Activity</h2>
      <div className="space-y-4">
        {activities.length === 0 ? (
          <div className="text-center py-4 text-gray-400">
            No recent activity
          </div>
        ) : (
          activities.slice(0, 5).map((activity) => (
            <ActivityItem
              key={activity.id}
              icon={getActivityIcon(activity.type)}
              message={activity.message}
              time={formatTime(activity.timestamp)}
            />
          ))
        )}
      </div>
    </motion.section>
  );
};

export default ActivityFeed;

================
File: src/components/dashboard/ActivityItem.tsx
================
import React from 'react';
import { Shield, ChevronRight } from 'lucide-react';

interface ActivityItemProps {
  icon?: React.ReactNode;
  message: string;
  time: string;
}

const ActivityItem = ({ icon = <Shield />, message, time }: ActivityItemProps) => {
  return (
    <div className="flex items-center space-x-4 text-sm text-gray-400">
      <div className="w-8 h-8 rounded-full bg-purple-900/30 flex items-center justify-center">
        <div className="w-4 h-4 text-purple-500">{icon}</div>
      </div>
      <div className="flex-1">
        {message}
        <div className="text-xs">{time}</div>
      </div>
      <ChevronRight className="w-4 h-4" />
    </div>
  );
};

export default ActivityItem;

================
File: src/components/dashboard/NewProjectModal.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { v4 as uuidv4 } from 'uuid';
import Button from '../ui/Button';
import { useProjectStore } from '../../lib/store/useProjectStore';
import { useActivityStore } from '../../lib/store/useActivityStore';

interface NewProjectModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const NewProjectModal = ({ isOpen, onClose }: NewProjectModalProps) => {
  const [formData, setFormData] = useState({
    name: '',
    type: 'defi',
    description: ''
  });

  const { addProject } = useProjectStore();
  const { addActivity } = useActivityStore();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const projectId = uuidv4();
    
    addProject({
      id: projectId,
      name: formData.name,
      type: formData.type,
      status: 'In Progress',
      progress: 0,
      completedSteps: [],
    });

    addActivity({
      id: uuidv4(),
      projectId,
      type: 'document',
      message: `Created new project: ${formData.name}`,
      timestamp: Date.now()
    });

    onClose();
    setFormData({ name: '', type: 'defi', description: '' });
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="bg-zinc-900 rounded-2xl p-6 w-full max-w-md border border-purple-900/20"
          >
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">New Project</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white">
                <X className="w-6 h-6" />
              </button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <label className="text-sm text-gray-400">Project Name</label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm text-gray-400">Project Type</label>
                <select
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                  className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
                >
                  <option value="defi">DeFi Protocol</option>
                  <option value="nft">NFT Platform</option>
                  <option value="gamefi">GameFi</option>
                  <option value="dao">DAO</option>
                </select>
              </div>

              <div className="space-y-2">
                <label className="text-sm text-gray-400">Description</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  className="w-full h-32 bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
                />
              </div>

              <div className="flex gap-4">
                <Button type="submit" variant="primary" className="flex-1">
                  Create Project
                </Button>
                <Button type="button" variant="outline" onClick={onClose}>
                  Cancel
                </Button>
              </div>
            </form>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default NewProjectModal;

================
File: src/components/dashboard/ProjectCard.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { useCurrentProjectStore } from '../../lib/store/useCurrentProjectStore';
import { Project } from '../../lib/store/useProjectStore';

interface ProjectCardProps {
  project: Project;
  index: number;
}

const ProjectCard = ({ project, index }: ProjectCardProps) => {
  const { currentProjectId, setCurrentProject } = useCurrentProjectStore();
  const isSelected = currentProjectId === project.id;

  return (
    <motion.div
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: index * 0.1 }}
      onClick={() => setCurrentProject(project.id)}
      className={`bg-black/50 rounded-xl p-4 hover:bg-purple-900/10 transition-colors cursor-pointer ${
        isSelected ? 'border-2 border-purple-500' : ''
      }`}
    >
      <div className="flex items-center justify-between">
        <div>
          <h3 className="font-semibold">{project.name}</h3>
          <p className="text-sm text-gray-400">{project.type}</p>
        </div>
        <div className="text-right">
          <div className="text-purple-500">{project.status}</div>
          <div className="text-sm text-gray-400">{project.progress}% Complete</div>
        </div>
      </div>
      <div className="mt-3 bg-zinc-800 rounded-full h-2">
        <div
          className="bg-purple-500 rounded-full h-2"
          style={{ width: `${project.progress}%` }}
        />
      </div>
    </motion.div>
  );
};

export default ProjectCard;

================
File: src/components/dashboard/ProjectList.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { useProjectStore } from '../../lib/store/useProjectStore';
import ProjectCard from './ProjectCard';

const ProjectList = () => {
  const projects = useProjectStore((state) => state.projects);

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <div className="space-y-4">
        {projects.length === 0 ? (
          <div className="text-center py-8 text-gray-400">
            No projects yet. Create your first project to get started!
          </div>
        ) : (
          projects.map((project, index) => (
            <ProjectCard key={project.id} project={project} index={index} />
          ))
        )}
      </div>
    </motion.section>
  );
};

export default ProjectList;

================
File: src/components/dashboard/QuickAction.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

interface QuickActionProps {
  icon: React.ReactNode;
  label: string;
  onClick: () => void;
}

const QuickAction = ({ icon, label, onClick }: QuickActionProps) => {
  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      onClick={onClick}
      className="p-4 bg-black/30 rounded-xl hover:bg-purple-900/20 transition-colors flex flex-col items-center justify-center space-y-2 w-full"
    >
      <div className="text-purple-500">{icon}</div>
      <span className="text-sm">{label}</span>
    </motion.button>
  );
};

export default QuickAction;

================
File: src/components/dashboard/ResourceLink.tsx
================
import React from 'react';
import { ChevronRight } from 'lucide-react';

interface ResourceLinkProps {
  label: string;
  onClick?: () => void;
}

const ResourceLink = ({ label, onClick }: ResourceLinkProps) => {
  return (
    <button
      onClick={onClick}
      className="w-full text-left p-3 rounded-lg hover:bg-purple-900/20 transition-colors text-gray-300 hover:text-white flex items-center justify-between"
    >
      {label}
      <ChevronRight className="w-4 h-4" />
    </button>
  );
};

export default ResourceLink;

================
File: src/components/dashboard/ResourceLinks.tsx
================
import React, { useState } from 'react';
import ResourceLink from './ResourceLink';
import ResourceModal from '../modals/ResourceModal';

const resources = [
  {
    label: 'Documentation',
    content: (
      <>
        <p className="mb-4">
          Welcome to the AI Launchpad documentation. Here you'll find comprehensive guides and documentation to help you start working with our platform as quickly as possible.
        </p>
        <h3 className="text-lg font-semibold mb-2">Getting Started</h3>
        <ul className="list-disc pl-6 mb-4">
          <li>Platform Overview</li>
          <li>Quick Start Guide</li>
          <li>Core Concepts</li>
          <li>Best Practices</li>
        </ul>
      </>
    ),
    links: [
      { label: 'Platform Guide', url: '#' },
      { label: 'API Documentation', url: '#' },
      { label: 'Smart Contract Examples', url: '#' },
      { label: 'Security Best Practices', url: '#' }
    ]
  },
  {
    label: 'API Reference',
    content: (
      <>
        <p className="mb-4">
          Our API reference provides detailed information about endpoints, parameters, and responses for integrating with the AI Launchpad platform.
        </p>
        <h3 className="text-lg font-semibold mb-2">API Sections</h3>
        <ul className="list-disc pl-6 mb-4">
          <li>Authentication</li>
          <li>Projects</li>
          <li>Smart Contracts</li>
          <li>Analytics</li>
        </ul>
      </>
    ),
    links: [
      { label: 'REST API Docs', url: '#' },
      { label: 'GraphQL Schema', url: '#' },
      { label: 'SDK Documentation', url: '#' },
      { label: 'API Changelog', url: '#' }
    ]
  },
  {
    label: 'Security Guidelines',
    content: (
      <>
        <p className="mb-4">
          Security is our top priority. Learn about our security features and best practices for keeping your projects safe.
        </p>
        <h3 className="text-lg font-semibold mb-2">Key Security Features</h3>
        <ul className="list-disc pl-6 mb-4">
          <li>Smart Contract Auditing</li>
          <li>Access Control</li>
          <li>Vulnerability Prevention</li>
          <li>Security Updates</li>
        </ul>
      </>
    ),
    links: [
      { label: 'Security Checklist', url: '#' },
      { label: 'Audit Reports', url: '#' },
      { label: 'Incident Response', url: '#' },
      { label: 'Security Updates', url: '#' }
    ]
  },
  {
    label: 'Community Forum',
    content: (
      <>
        <p className="mb-4">
          Join our vibrant community of developers, founders, and blockchain enthusiasts. Share knowledge, get help, and collaborate on projects.
        </p>
        <h3 className="text-lg font-semibold mb-2">Popular Categories</h3>
        <ul className="list-disc pl-6 mb-4">
          <li>General Discussion</li>
          <li>Technical Support</li>
          <li>Project Showcase</li>
          <li>Feature Requests</li>
        </ul>
      </>
    ),
    links: [
      { label: 'Join Discord', url: '#' },
      { label: 'Telegram Group', url: '#' },
      { label: 'Developer Forum', url: '#' },
      { label: 'Community Guidelines', url: '#' }
    ]
  }
];

const ResourceLinks = () => {
  const [selectedResource, setSelectedResource] = useState<typeof resources[0] | null>(null);

  return (
    <>
      <section className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
        <h2 className="text-xl font-bold mb-4">Resources</h2>
        <div className="space-y-3">
          {resources.map((resource, index) => (
            <ResourceLink
              key={index}
              label={resource.label}
              onClick={() => setSelectedResource(resource)}
            />
          ))}
        </div>
      </section>

      <ResourceModal
        isOpen={!!selectedResource}
        onClose={() => setSelectedResource(null)}
        resource={selectedResource!}
      />
    </>
  );
};

export default ResourceLinks;

================
File: src/components/features/FeatureCard.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { LucideIcon } from 'lucide-react';

interface FeatureCardProps {
  icon: LucideIcon;
  title: string;
  description: string;
  index: number;
}

const FeatureCard = ({ icon: Icon, title, description, index }: FeatureCardProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      whileHover={{ scale: 1.02 }}
      className="p-6 rounded-2xl bg-gradient-to-br from-purple-900/50 to-transparent border border-purple-800/50 hover:border-purple-600/50 transition-all group relative overflow-hidden"
    >
      {/* Glowing background effect */}
      <div className="absolute inset-0 bg-gradient-radial from-purple-500/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      
      {/* Icon with animation */}
      <div className="relative">
        <div className="text-purple-500 mb-4 transform group-hover:scale-110 transition-transform duration-300">
          <Icon className="w-8 h-8" />
        </div>
        
        {/* Content */}
        <h3 className="text-xl font-semibold text-white mb-2 relative z-10">
          {title}
        </h3>
        <p className="text-gray-400 relative z-10">
          {description}
        </p>
      </div>

      {/* Hover effect lines */}
      <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none">
        <div className="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-purple-500/50 to-transparent" />
        <div className="absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-purple-500/50 to-transparent" />
        <div className="absolute top-0 left-0 w-px h-full bg-gradient-to-b from-transparent via-purple-500/50 to-transparent" />
        <div className="absolute top-0 right-0 w-px h-full bg-gradient-to-b from-transparent via-purple-500/50 to-transparent" />
      </div>
    </motion.div>
  );
};

export default FeatureCard;

================
File: src/components/features/FeatureGrid.tsx
================
import React from 'react';
import { 
  Bot, 
  Code2, 
  Shield, 
  Zap,
  FileCode2,
  FileText,
  FolderKanban,
  Rocket,
  Users,
  Lock,
  BarChart3,
  Globe,
  Coins,
  Brain,
  Network,
  Layers
} from 'lucide-react';
import FeatureCard from './FeatureCard';

const features = [
  {
    icon: Bot,
    title: 'AI Token Generator',
    description: 'Create custom tokens with advanced features using AI-powered smart contract generation'
  },
  {
    icon: Brain,
    title: 'AI Contract Analysis',
    description: 'Deep learning algorithms analyze and optimize your smart contracts for security and efficiency'
  },
  {
    icon: Shield,
    title: 'Advanced Security',
    description: 'Automated vulnerability detection and real-time security monitoring with AI-powered threat detection'
  },
  {
    icon: Network,
    title: 'Multi-Chain Support',
    description: 'Deploy across multiple blockchains with automated compatibility checks and cross-chain integration'
  },
  {
    icon: FileCode2,
    title: 'Custom Token Features',
    description: 'Implement advanced tokenomics with anti-whale mechanisms, vesting schedules, and staking capabilities'
  },
  {
    icon: Lock,
    title: 'Automated Compliance',
    description: 'Built-in regulatory compliance checks and automated KYC/AML integration'
  },
  {
    icon: Layers,
    title: 'Smart Contract Templates',
    description: 'Pre-audited, customizable templates for various token standards and DeFi protocols'
  },
  {
    icon: FileText,
    title: 'AI Documentation',
    description: 'Auto-generate comprehensive documentation, white papers, and technical specifications'
  },
  {
    icon: FolderKanban,
    title: 'Project Management',
    description: 'Integrated tools for team collaboration, task tracking, and milestone management'
  },
  {
    icon: Users,
    title: 'Community Tools',
    description: 'Built-in social features, governance mechanisms, and community engagement analytics'
  },
  {
    icon: BarChart3,
    title: 'Analytics Dashboard',
    description: 'Real-time metrics, market analysis, and predictive analytics for your token'
  },
  {
    icon: Coins,
    title: 'Token Economics',
    description: 'Advanced tokenomics modeling with AI-powered market simulation and analysis'
  },
  {
    icon: Rocket,
    title: 'Launch Automation',
    description: 'Streamlined deployment process with automated liquidity management and listing'
  },
  {
    icon: Globe,
    title: 'IDO Platform',
    description: 'Integrated platform for token sales with KYC, vesting, and distribution automation'
  },
  {
    icon: Zap,
    title: 'Gas Optimization',
    description: 'AI-powered contract optimization for minimal gas consumption and maximum efficiency'
  },
  {
    icon: Code2,
    title: 'Developer Tools',
    description: 'Comprehensive SDK, API access, and integration tools for developers'
  }
];

const FeatureGrid = () => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
      {features.map((feature, index) => (
        <FeatureCard
          key={index}
          icon={feature.icon}
          title={feature.title}
          description={feature.description}
          index={index}
        />
      ))}
    </div>
  );
};

export default FeatureGrid;

================
File: src/components/hero/FloatingElements.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Box, Database, Code2, Cpu, Shield, Zap } from 'lucide-react';

const icons = [Box, Database, Code2, Cpu, Shield, Zap];

const FloatingElements = () => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {icons.map((Icon, index) => (
        <motion.div
          key={index}
          className="absolute"
          initial={{
            x: Math.random() * window.innerWidth,
            y: Math.random() * window.innerHeight,
            scale: 0,
            rotate: 0
          }}
          animate={{
            y: [0, -50, 0],
            scale: [1, 1.2, 1],
            rotate: [0, 360],
            z: [0, 50, 0]
          }}
          transition={{
            duration: 8 + Math.random() * 4,
            repeat: Infinity,
            ease: "easeInOut",
            delay: index * 0.5
          }}
          style={{
            perspective: "1000px",
            transformStyle: "preserve-3d"
          }}
        >
          <div className="relative">
            <Icon className="w-12 h-12 text-purple-500/30" />
            <motion.div
              className="absolute inset-0"
              animate={{
                opacity: [0.3, 0.6, 0.3],
                scale: [1, 1.2, 1]
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: "easeInOut"
              }}
              style={{
                background: "radial-gradient(circle, rgba(147, 51, 234, 0.2) 0%, transparent 70%)",
                filter: "blur(8px)"
              }}
            />
          </div>
        </motion.div>
      ))}
    </div>
  );
};

export default FloatingElements;

================
File: src/components/hero/HeroActions.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { Rocket, ArrowRight } from 'lucide-react';
import Button from '../ui/Button';

const HeroActions = () => {
  return (
    <motion.div
      className="flex flex-col sm:flex-row gap-4 justify-center"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.9 }}
    >
      <motion.div
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Link to="/apply">
          <Button variant="primary" size="lg" className="group">
            Apply Now
            <Rocket className="w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" />
          </Button>
        </Link>
      </motion.div>

      <motion.div
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <Button variant="outline" size="lg" className="group">
          Learn More
          <ArrowRight className="w-5 h-5 ml-2 transition-transform group-hover:translate-x-1" />
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default HeroActions;

================
File: src/components/hero/HeroBackground.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

const HeroBackground = () => {
  return (
    <>
      <motion.div
        className="absolute inset-0"
        style={{
          background: 'radial-gradient(circle at center, rgba(147, 51, 234, 0.2) 0%, transparent 70%)',
          filter: 'blur(100px)',
        }}
        animate={{
          scale: [1, 1.2, 1],
          opacity: [0.3, 0.5, 0.3],
        }}
        transition={{
          duration: 8,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />

      <div className="absolute inset-0 overflow-hidden">
        {[...Array(5)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute h-px w-full"
            style={{
              top: `${(i + 1) * 20}%`,
              background: 'linear-gradient(90deg, transparent 0%, rgba(147, 51, 234, 0.3) 50%, transparent 100%)',
              opacity: 0.5
            }}
            animate={{
              opacity: [0.3, 0.7, 0.3],
              scaleX: [0.8, 1, 0.8]
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              delay: i * 0.2
            }}
          />
        ))}
      </div>

      <div 
        className="absolute inset-0 pointer-events-none"
        style={{
          backgroundImage: `linear-gradient(rgba(147, 51, 234, 0.1) 1px, transparent 1px),
                           linear-gradient(90deg, rgba(147, 51, 234, 0.1) 1px, transparent 1px)`,
          backgroundSize: '40px 40px',
          perspective: '1000px',
          transform: 'rotateX(60deg) scale(2)',
          opacity: 0.3,
          animation: 'grid-move 20s linear infinite'
        }}
      />

      <style>
        {`
          @keyframes grid-move {
            0% {
              transform: rotateX(60deg) translateY(0) scale(2);
            }
            100% {
              transform: rotateX(60deg) translateY(-40px) scale(2);
            }
          }
        `}
      </style>
    </>
  );
};

export default HeroBackground;

================
File: src/components/hero/HeroLogo.tsx
================
import React from 'react';
import Robot3D from './Robot3D';

const HeroLogo = () => {
  return <Robot3D />;
};

export default HeroLogo;

================
File: src/components/hero/HeroSubtitle.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

const HeroSubtitle = () => {
  const words = [
    'Join our exclusive community of innovative blockchain startups.',
    'Apply now to access our AI-powered launchpad platform.'
  ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5, delay: 0.3 }}
      className="text-xl md:text-2xl text-gray-300 mb-12 max-w-3xl mx-auto"
    >
      {words.map((word, index) => (
        <motion.p
          key={index}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.5 + index * 0.2 }}
          className="mb-2"
        >
          {word}
        </motion.p>
      ))}
    </motion.div>
  );
};

export default HeroSubtitle;

================
File: src/components/hero/HeroTitle.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

const HeroTitle = () => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.8 }}
      className="relative"
    >
      <motion.h1
        className="text-6xl md:text-7xl font-bold mb-6 relative z-10"
        style={{
          background: "linear-gradient(to right, #e879f9, #9333ea, #4f46e5)",
          WebkitBackgroundClip: "text",
          WebkitTextFillColor: "transparent",
          backgroundSize: "200% 200%"
        }}
        animate={{
          backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"],
        }}
        transition={{
          duration: 5,
          repeat: Infinity,
          ease: "linear"
        }}
      >
        Launch Your Web3 Future
      </motion.h1>

      {/* Glowing effect */}
      <motion.div
        className="absolute inset-0 blur-3xl"
        style={{
          background: "linear-gradient(to right, rgba(232, 121, 249, 0.3), rgba(147, 51, 234, 0.3), rgba(79, 70, 229, 0.3))",
          filter: "blur(40px)",
          opacity: 0.5,
          zIndex: 0
        }}
        animate={{
          opacity: [0.3, 0.5, 0.3],
        }}
        transition={{
          duration: 3,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />
    </motion.div>
  );
};

export default HeroTitle;

================
File: src/components/hero/Robot3D.tsx
================
import React, { useEffect, useState } from 'react';
import { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';

const Robot3D = () => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);

  const springConfig = { damping: 25, stiffness: 150 };
  const x = useSpring(mouseX, springConfig);
  const y = useSpring(mouseY, springConfig);

  const rotateX = useTransform(y, [-300, 300], [15, -15]);
  const rotateY = useTransform(x, [-300, 300], [-15, 15]);

  useEffect(() => {
    const handleMouseMove = (event: MouseEvent) => {
      const { clientX, clientY } = event;
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;
      
      mouseX.set(clientX - centerX);
      mouseY.set(clientY - centerY);
      setMousePosition({ x: clientX, y: clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, [mouseX, mouseY]);

  return (
    <motion.div
      className="relative w-64 h-64 mx-auto"
      style={{
        rotateX,
        rotateY,
        perspective: 1000,
        transformStyle: 'preserve-3d'
      }}
    >
      {/* Robot Head Base */}
      <motion.div
        className="absolute inset-0"
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", duration: 1.5 }}
      >
        <div className="relative w-full h-full">
          {/* Main Head Structure */}
          <motion.div
            className="absolute inset-0 bg-gradient-to-b from-zinc-800 to-zinc-900 rounded-2xl"
            style={{ 
              transformStyle: 'preserve-3d',
              boxShadow: '0 0 30px rgba(147, 51, 234, 0.3)',
              border: '2px solid rgba(147, 51, 234, 0.5)'
            }}
          >
            {/* Robot Eyes */}
            <div className="absolute top-1/4 left-1/2 -translate-x-1/2 w-32 flex justify-between">
              <motion.div
                className="w-12 h-12 rounded-full bg-purple-600"
                style={{
                  boxShadow: '0 0 20px rgba(147, 51, 234, 0.8)',
                  background: 'radial-gradient(circle at center, #9333ea 0%, #4c1d95 100%)'
                }}
                animate={{
                  boxShadow: [
                    '0 0 20px rgba(147, 51, 234, 0.8)',
                    '0 0 40px rgba(147, 51, 234, 0.8)',
                    '0 0 20px rgba(147, 51, 234, 0.8)'
                  ]
                }}
                transition={{ duration: 2, repeat: Infinity }}
              />
              <motion.div
                className="w-12 h-12 rounded-full bg-purple-600"
                style={{
                  boxShadow: '0 0 20px rgba(147, 51, 234, 0.8)',
                  background: 'radial-gradient(circle at center, #9333ea 0%, #4c1d95 100%)'
                }}
                animate={{
                  boxShadow: [
                    '0 0 20px rgba(147, 51, 234, 0.8)',
                    '0 0 40px rgba(147, 51, 234, 0.8)',
                    '0 0 20px rgba(147, 51, 234, 0.8)'
                  ]
                }}
                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
              />
            </div>

            {/* Face Plate Details */}
            <div className="absolute inset-0 overflow-hidden">
              {[...Array(8)].map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute h-px w-full"
                  style={{
                    top: `${(i + 1) * 12}%`,
                    background: 'linear-gradient(90deg, transparent 0%, rgba(147, 51, 234, 0.3) 50%, transparent 100%)',
                    opacity: 0.5
                  }}
                  animate={{
                    opacity: [0.3, 0.7, 0.3],
                    scaleX: [0.8, 1, 0.8]
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    delay: i * 0.2
                  }}
                />
              ))}
            </div>

            {/* Mechanical Details */}
            <div className="absolute inset-x-0 bottom-8 flex justify-center gap-4">
              {[...Array(3)].map((_, i) => (
                <motion.div
                  key={i}
                  className="w-4 h-4 rounded-full bg-purple-700"
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.5, 1, 0.5]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    delay: i * 0.3
                  }}
                />
              ))}
            </div>
          </motion.div>
        </div>
      </motion.div>

      {/* Holographic Field */}
      <motion.div
        className="absolute -inset-12"
        style={{
          background: 'radial-gradient(circle, rgba(147,51,234,0.1) 0%, rgba(147,51,234,0) 70%)',
          filter: 'blur(20px)',
          zIndex: -1
        }}
        animate={{
          scale: [1, 1.1, 1],
          opacity: [0.3, 0.5, 0.3]
        }}
        transition={{
          duration: 4,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      />
    </motion.div>
  );
};

export default Robot3D;

================
File: src/components/launch/Analytics.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { BarChart3, TrendingUp, Users, MessageCircle } from 'lucide-react';
import { useSocialStore } from '../../lib/store/useSocialStore';

const Analytics = () => {
  const { stats } = useSocialStore();
  
  const totalMembers = stats.discord.members + stats.telegram.members;
  const totalEngagement = (stats.twitter.engagement + stats.discord.active + stats.telegram.active) / 3;
  
  const metrics = [
    {
      label: 'Total Community Size',
      value: totalMembers.toLocaleString(),
      change: '+25%',
      icon: Users
    },
    {
      label: 'Average Engagement',
      value: `${Math.round(totalEngagement)}%`,
      change: '+12%',
      icon: TrendingUp
    },
    {
      label: 'Social Reach',
      value: stats.twitter.followers.toLocaleString(),
      change: '+18%',
      icon: MessageCircle
    },
    {
      label: 'Growth Rate',
      value: '32%',
      change: '+5%',
      icon: BarChart3
    }
  ];

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.4 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <BarChart3 className="w-5 h-5 mr-2 text-purple-500" />
        Analytics & Tracking
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {metrics.map((metric, index) => (
          <div
            key={index}
            className="p-4 bg-black/30 rounded-lg"
          >
            <div className="flex items-center justify-between mb-2">
              <div className="text-sm text-gray-400">{metric.label}</div>
              <metric.icon className="w-4 h-4 text-purple-500" />
            </div>
            <div className="flex items-center justify-between">
              <div className="text-xl font-bold text-purple-500">{metric.value}</div>
              <div className="text-sm text-green-500">{metric.change}</div>
            </div>
          </div>
        ))}
      </div>
    </motion.section>
  );
};

export default Analytics;

================
File: src/components/launch/BlockchainSelector.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Network } from 'lucide-react';

const chains = [
  { id: 'ethereum', name: 'Ethereum', icon: '⟠' },
  { id: 'bsc', name: 'BNB Chain', icon: '⛓️' },
  { id: 'polygon', name: 'Polygon', icon: '⬡' },
  { id: 'arbitrum', name: 'Arbitrum', icon: '🔷' },
  { id: 'optimism', name: 'Optimism', icon: '🔴' },
  { id: 'avalanche', name: 'Avalanche', icon: '🔺' }
];

interface BlockchainSelectorProps {
  selectedChain: string;
  onSelect: (chainId: string) => void;
}

const BlockchainSelector: React.FC<BlockchainSelectorProps> = ({ selectedChain, onSelect }) => {
  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Network className="w-5 h-5 mr-2 text-purple-500" />
        Select Blockchain
      </h2>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {chains.map((chain) => (
          <button
            key={chain.id}
            onClick={() => onSelect(chain.id)}
            className={`p-4 rounded-lg border transition-colors ${
              selectedChain === chain.id
                ? 'border-purple-500 bg-purple-900/20'
                : 'border-purple-900/20 bg-black/30 hover:bg-purple-900/10'
            }`}
          >
            <div className="text-2xl mb-2">{chain.icon}</div>
            <div className="font-medium">{chain.name}</div>
          </button>
        ))}
      </div>
    </motion.section>
  );
};

export default BlockchainSelector;

================
File: src/components/launch/LaunchRequirements.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Shield, Users, Lock, Globe } from 'lucide-react';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

const LaunchRequirements = () => {
  const { currentProject } = useCurrentProject();
  const completedSteps = currentProject?.completedSteps || [];

  const requirements = [
    {
      label: 'Smart Contract Audit',
      status: completedSteps.includes('Smart Contract Audit') ? 'Completed' : 'Pending',
      icon: Shield,
      step: 'Smart Contract Audit'
    },
    {
      label: 'KYC Verification',
      status: completedSteps.includes('KYC Verification') ? 'Completed' : 'Pending',
      icon: Users,
      step: 'KYC Verification'
    },
    {
      label: 'Liquidity Lock',
      status: completedSteps.includes('Liquidity Lock') ? 'Completed' : 'Not Started',
      icon: Lock,
      step: 'Liquidity Lock'
    },
    {
      label: 'Marketing Materials',
      status: completedSteps.includes('Marketing Materials') ? 'Completed' : 'In Progress',
      icon: Globe,
      step: 'Marketing Materials'
    }
  ];

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Shield className="w-5 h-5 mr-2 text-purple-500" />
        Launch Requirements
      </h2>
      <div className="space-y-4">
        {requirements.map((item, index) => (
          <div
            key={index}
            className="flex items-center justify-between p-4 bg-black/30 rounded-lg"
          >
            <div className="flex items-center space-x-3">
              <div className="text-purple-500">
                <item.icon className="w-4 h-4" />
              </div>
              <span>{item.label}</span>
            </div>
            <span className={`text-sm ${
              item.status === 'Completed' ? 'text-green-500' :
              item.status === 'In Progress' ? 'text-yellow-500' :
              item.status === 'Pending' ? 'text-purple-500' :
              'text-gray-400'
            }`}>{item.status}</span>
          </div>
        ))}
      </div>
    </motion.section>
  );
};

export default LaunchRequirements;

================
File: src/components/launch/SocialConnector.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Users, Twitter, MessageCircle } from 'lucide-react';
import { useSocialStore } from '../../lib/store/useSocialStore';
import Button from '../ui/Button';

const SocialConnector = () => {
  const { stats, connectPlatform, disconnectPlatform } = useSocialStore();

  const handleConnect = (platform: 'twitter' | 'discord' | 'telegram') => {
    // In a real implementation, this would handle OAuth flow
    connectPlatform(platform);
  };

  const handleDisconnect = (platform: 'twitter' | 'discord' | 'telegram') => {
    disconnectPlatform(platform);
  };

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Users className="w-5 h-5 mr-2 text-purple-500" />
        Community Setup
      </h2>
      <div className="space-y-4">
        {[
          { platform: 'twitter', icon: Twitter, stats: stats.twitter },
          { platform: 'discord', icon: Users, stats: stats.discord },
          { platform: 'telegram', icon: MessageCircle, stats: stats.telegram }
        ].map(({ platform, icon: Icon, stats }) => (
          <div
            key={platform}
            className="flex items-center justify-between p-4 bg-black/30 rounded-lg"
          >
            <div className="flex items-center space-x-3">
              <Icon className="w-4 h-4 text-purple-500" />
              <span className="capitalize">{platform}</span>
            </div>
            <div className="flex items-center space-x-4">
              {stats.connected && (
                <div className="text-sm text-gray-400">
                  {platform === 'twitter' ? `${stats.followers} followers` : `${stats.members} members`}
                </div>
              )}
              <Button
                variant={stats.connected ? 'outline' : 'primary'}
                size="sm"
                onClick={() => stats.connected ? handleDisconnect(platform as any) : handleConnect(platform as any)}
              >
                {stats.connected ? 'Disconnect' : 'Connect'}
              </Button>
            </div>
          </div>
        ))}
      </div>
    </motion.section>
  );
};

export default SocialConnector;

================
File: src/components/modals/ResourceModal.tsx
================
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, ExternalLink } from 'lucide-react';
import Button from '../ui/Button';

interface ResourceModalProps {
  isOpen: boolean;
  onClose: () => void;
  resource: {
    label: string;
    content: React.ReactNode;
    links?: { label: string; url: string }[];
  };
}

const ResourceModal = ({ isOpen, onClose, resource }: ResourceModalProps) => {
  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="bg-zinc-900 rounded-2xl p-6 w-full max-w-2xl border border-purple-900/20 max-h-[80vh] overflow-y-auto"
          >
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">{resource.label}</h2>
              <button onClick={onClose} className="text-gray-400 hover:text-white">
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="prose prose-invert max-w-none mb-6">
              {resource.content}
            </div>

            {resource.links && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Related Resources</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {resource.links.map((link, index) => (
                    <a
                      key={index}
                      href={link.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center justify-between p-4 bg-black/30 rounded-lg hover:bg-purple-900/20 transition-colors group"
                    >
                      <span>{link.label}</span>
                      <ExternalLink className="w-4 h-4 text-purple-500 group-hover:scale-110 transition-transform" />
                    </a>
                  ))}
                </div>
              </div>
            )}

            <div className="mt-6 flex justify-end">
              <Button variant="outline" onClick={onClose}>
                Close
              </Button>
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default ResourceModal;

================
File: src/components/project/ProjectOverview.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Target, Calendar, Users, Rocket } from 'lucide-react';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

const projectTypes = [
  { value: 'defi', label: 'DeFi Protocol' },
  { value: 'dex', label: 'Decentralized Exchange' },
  { value: 'lending', label: 'Lending Platform' },
  { value: 'yield', label: 'Yield Farming' },
  { value: 'nft', label: 'NFT Platform' },
  { value: 'nft-marketplace', label: 'NFT Marketplace' },
  { value: 'gamefi', label: 'GameFi' },
  { value: 'metaverse', label: 'Metaverse' },
  { value: 'dao', label: 'DAO' },
  { value: 'social', label: 'Social Platform' },
  { value: 'oracle', label: 'Oracle Service' },
  { value: 'bridge', label: 'Cross-chain Bridge' },
  { value: 'privacy', label: 'Privacy Solution' },
  { value: 'infrastructure', label: 'Infrastructure' },
  { value: 'launchpad', label: 'Token Launchpad' },
  { value: 'insurance', label: 'DeFi Insurance' },
  { value: 'derivatives', label: 'Derivatives Platform' },
  { value: 'payments', label: 'Payment Solution' },
  { value: 'identity', label: 'Identity & KYC' },
  { value: 'other', label: 'Other' }
];

const ProjectOverview = () => {
  const { currentProject, updateProjectDetails } = useCurrentProject();

  const handleInputChange = (field: string, value: string) => {
    if (!currentProject) return;
    updateProjectDetails({ [field]: value });
  };

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Target className="w-5 h-5 mr-2 text-purple-500" />
        Project Overview
      </h2>
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Project Name</label>
            <input
              type="text"
              value={currentProject?.name || ''}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              placeholder="Enter project name"
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Project Type</label>
            <select
              value={currentProject?.type || ''}
              onChange={(e) => handleInputChange('type', e.target.value)}
              className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
            >
              <option value="">Select project type</option>
              {projectTypes.map((type) => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="space-y-2">
          <label className="text-sm text-gray-400">Project Description</label>
          <textarea
            value={currentProject?.description || ''}
            onChange={(e) => handleInputChange('description', e.target.value)}
            className="w-full h-32 bg-black/30 rounded-lg p-4 text-gray-300 placeholder-gray-500 border border-purple-900/20"
            placeholder="Describe your project..."
          />
        </div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="flex items-center text-purple-500 mb-2">
              <Calendar className="w-4 h-4 mr-2" />
              <span className="text-sm">Start Date</span>
            </div>
            <div className="font-semibold">
              {currentProject?.startDate ? new Date(currentProject.startDate).toLocaleDateString() : 'Not set'}
            </div>
          </div>
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="flex items-center text-purple-500 mb-2">
              <Users className="w-4 h-4 mr-2" />
              <span className="text-sm">Team Size</span>
            </div>
            <div className="font-semibold">
              {currentProject?.teamMembers?.length || 0} Members
            </div>
          </div>
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="flex items-center text-purple-500 mb-2">
              <Target className="w-4 h-4 mr-2" />
              <span className="text-sm">Progress</span>
            </div>
            <div className="font-semibold">
              {currentProject?.progress || 0}%
            </div>
          </div>
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="flex items-center text-purple-500 mb-2">
              <Rocket className="w-4 h-4 mr-2" />
              <span className="text-sm">Status</span>
            </div>
            <div className="font-semibold capitalize">
              {currentProject?.status || 'Planning'}
            </div>
          </div>
        </div>
      </div>
    </motion.section>
  );
};

export default ProjectOverview;

================
File: src/components/project/TeamManagement.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Users, Plus, X } from 'lucide-react';
import Button from '../ui/Button';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

interface TeamMember {
  id: string;
  name: string;
  role: string;
  wallet?: string;
}

const TeamManagement = () => {
  const { currentProject, updateProjectDetails } = useCurrentProject();
  const [isAddingMember, setIsAddingMember] = useState(false);
  const [newMember, setNewMember] = useState({ name: '', role: '', wallet: '' });

  const handleAddMember = () => {
    if (!currentProject || !newMember.name || !newMember.role) return;

    const member: TeamMember = {
      id: Date.now().toString(),
      name: newMember.name,
      role: newMember.role,
      wallet: newMember.wallet
    };

    const updatedMembers = [...(currentProject.teamMembers || []), member];
    updateProjectDetails({ teamMembers: updatedMembers });
    setNewMember({ name: '', role: '', wallet: '' });
    setIsAddingMember(false);
  };

  const handleRemoveMember = (id: string) => {
    if (!currentProject) return;
    const updatedMembers = currentProject.teamMembers?.filter(m => m.id !== id) || [];
    updateProjectDetails({ teamMembers: updatedMembers });
  };

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-bold flex items-center">
          <Users className="w-5 h-5 mr-2 text-purple-500" />
          Team Management
        </h2>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setIsAddingMember(true)}
        >
          <Plus className="w-4 h-4 mr-2" />
          Add Member
        </Button>
      </div>

      <div className="space-y-4">
        {isAddingMember && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="p-4 bg-black/30 rounded-lg border border-purple-900/20"
          >
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <input
                type="text"
                placeholder="Name"
                value={newMember.name}
                onChange={(e) => setNewMember({ ...newMember, name: e.target.value })}
                className="bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              />
              <input
                type="text"
                placeholder="Role"
                value={newMember.role}
                onChange={(e) => setNewMember({ ...newMember, role: e.target.value })}
                className="bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              />
              <input
                type="text"
                placeholder="Wallet Address (Optional)"
                value={newMember.wallet}
                onChange={(e) => setNewMember({ ...newMember, wallet: e.target.value })}
                className="bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsAddingMember(false)}
              >
                Cancel
              </Button>
              <Button
                variant="primary"
                size="sm"
                onClick={handleAddMember}
                disabled={!newMember.name || !newMember.role}
              >
                Add Member
              </Button>
            </div>
          </motion.div>
        )}

        {currentProject?.teamMembers?.map((member) => (
          <div
            key={member.id}
            className="flex items-center justify-between p-4 bg-black/30 rounded-lg hover:bg-purple-900/20 transition-colors"
          >
            <div>
              <h3 className="font-semibold">{member.name}</h3>
              <p className="text-sm text-gray-400">{member.role}</p>
              {member.wallet && (
                <p className="text-xs text-gray-500 mt-1">{member.wallet}</p>
              )}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleRemoveMember(member.id)}
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        ))}

        {(!currentProject?.teamMembers || currentProject.teamMembers.length === 0) && !isAddingMember && (
          <div className="text-center py-8 text-gray-400">
            No team members added yet. Click "Add Member" to get started.
          </div>
        )}
      </div>
    </motion.section>
  );
};

export default TeamManagement;

================
File: src/components/token/ContractTemplates.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { FileCode2, Shield, Copy, Eye } from 'lucide-react';
import Button from '../ui/Button';

const templates = [
  {
    name: 'SIMPLE ERC20 TOKEN',
    description: 'Basic ERC20 token with fixed supply',
    audited: true,
    code: `// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract FixedToken is ERC20 {
    constructor(
        string memory name,
        string memory symbol,
        uint256 totalSupply
    ) payable ERC20(name, symbol) {
        _mint(msg.sender, totalSupply);
    }
}`
  },
  {
    name: 'MINTABLE TOKEN',
    description: 'ERC20 token with minting capability',
    audited: true,
    code: `// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MintableToken is ERC20, Ownable {
    constructor(
        string memory name,
        string memory symbol,
        uint256 initialSupply
    ) payable ERC20(name, symbol) {
        _mint(msg.sender, initialSupply);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
}`
  }
];

const ContractTemplates = () => {
  const [selectedTemplate, setSelectedTemplate] = React.useState<number | null>(null);

  const handleCopy = (code: string) => {
    navigator.clipboard.writeText(code);
  };

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <FileCode2 className="w-5 h-5 mr-2 text-purple-500" />
        Contract Templates
      </h2>

      <div className="space-y-6">
        {templates.map((template, index) => (
          <div
            key={index}
            className="bg-black/30 rounded-lg overflow-hidden border border-purple-900/20"
          >
            <div className="p-4 flex items-center justify-between">
              <div>
                <div className="flex items-center space-x-2">
                  <h3 className="font-semibold">{template.name}</h3>
                  {template.audited && (
                    <span className="px-2 py-1 text-xs rounded-full bg-green-900/50 text-green-400 flex items-center">
                      <Shield className="w-3 h-3 mr-1" />
                      Audited
                    </span>
                  )}
                </div>
                <p className="text-sm text-gray-400">{template.description}</p>
              </div>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleCopy(template.code)}
                >
                  <Copy className="w-4 h-4 mr-1" />
                  Copy
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setSelectedTemplate(selectedTemplate === index ? null : index)}
                >
                  <Eye className="w-4 h-4 mr-1" />
                  {selectedTemplate === index ? 'Hide' : 'View'}
                </Button>
              </div>
            </div>
            {selectedTemplate === index && (
              <div className="p-4 bg-black/50 border-t border-purple-900/20">
                <pre className="text-sm overflow-x-auto">
                  <code className="text-gray-300">{template.code}</code>
                </pre>
              </div>
            )}
          </div>
        ))}
      </div>
    </motion.section>
  );
};

export default ContractTemplates;

================
File: src/components/token/SecurityFeatures.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Shield } from 'lucide-react';

const SecurityFeatures = () => {
  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.4 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Shield className="w-5 h-5 mr-2 text-purple-500" />
        Security Features
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {[
          'Anti-whale Mechanism',
          'Liquidity Lock',
          'Ownership Renouncement',
          'Trading Limits'
        ].map((feature, index) => (
          <label
            key={index}
            className="flex items-center space-x-2 p-3 bg-black/30 rounded-lg cursor-pointer hover:bg-purple-900/20 transition-colors"
          >
            <input type="checkbox" className="form-checkbox text-purple-500" />
            <span className="text-gray-300">{feature}</span>
          </label>
        ))}
      </div>
    </motion.section>
  );
};

export default SecurityFeatures;

================
File: src/components/token/StoredContracts.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { FileCode2, ExternalLink, Copy, Trash2 } from 'lucide-react';
import Button from '../ui/Button';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

interface StoredContract {
  id: string;
  name: string;
  address?: string;
  code: string;
  createdAt: string;
}

const StoredContracts = () => {
  const { currentProject } = useCurrentProject();
  const [selectedContract, setSelectedContract] = React.useState<string | null>(null);

  // In a real app, this would come from your storage
  const contracts: StoredContract[] = currentProject?.contracts || [];

  const handleCopy = (code: string) => {
    navigator.clipboard.writeText(code);
  };

  const handleDelete = (id: string) => {
    // Implement delete functionality
    console.log('Delete contract:', id);
  };

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <FileCode2 className="w-5 h-5 mr-2 text-purple-500" />
        Your Smart Contracts
      </h2>

      {contracts.length === 0 ? (
        <div className="text-center py-8 text-gray-400">
          No contracts created yet. Use the token builder or templates to create your first contract.
        </div>
      ) : (
        <div className="space-y-4">
          {contracts.map((contract) => (
            <div
              key={contract.id}
              className="bg-black/30 rounded-lg p-4 border border-purple-900/20"
            >
              <div className="flex items-center justify-between mb-2">
                <div>
                  <h3 className="font-semibold">{contract.name}</h3>
                  <p className="text-sm text-gray-400">Created {new Date(contract.createdAt).toLocaleDateString()}</p>
                </div>
                <div className="flex space-x-2">
                  {contract.address && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => window.open(`https://etherscan.io/address/${contract.address}`, '_blank')}
                    >
                      <ExternalLink className="w-4 h-4 mr-1" />
                      View
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleCopy(contract.code)}
                  >
                    <Copy className="w-4 h-4 mr-1" />
                    Copy
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDelete(contract.id)}
                  >
                    <Trash2 className="w-4 h-4 mr-1" />
                    Delete
                  </Button>
                </div>
              </div>
              {selectedContract === contract.id && (
                <pre className="mt-4 p-4 bg-black/50 rounded-lg overflow-x-auto">
                  <code className="text-sm text-gray-300">{contract.code}</code>
                </pre>
              )}
            </div>
          ))}
        </div>
      )}
    </motion.section>
  );
};

export default StoredContracts;

================
File: src/components/token/TokenBuilderForm.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Bot, AlertCircle } from 'lucide-react';
import Button from '../ui/Button';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';
import { useProjectStore } from '../../lib/store/useProjectStore';
import { ContractGenerationService } from '../../lib/ai/services/ContractGenerationService';
import { v4 as uuidv4 } from 'uuid';

const TokenBuilderForm = () => {
  const { currentProject, markStepComplete } = useCurrentProject();
  const { updateProject, addContract } = useProjectStore();
  const [isGenerating, setIsGenerating] = useState(false);
  const [config, setConfig] = useState({
    name: '',
    symbol: '',
    initialSupply: '',
    features: {
      mintable: false,
      burnable: false,
      pausable: false,
      staking: false,
      governance: false,
      deflation: false,
    }
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!currentProject) return;

    setIsGenerating(true);
    try {
      // Generate contract using AI
      const contractCode = await ContractGenerationService.generateContract(config);
      
      // Analyze the generated contract
      const analysis = await ContractGenerationService.analyzeContract(contractCode);
      
      // Create new contract
      const contract = {
        id: uuidv4(),
        name: config.name,
        code: contractCode,
        createdAt: new Date().toISOString(),
        verified: false,
        audited: false,
      };

      // Update project with token configuration and add contract
      updateProject(currentProject.id, { 
        tokenConfig: config,
        contracts: [...(currentProject.contracts || []), contract]
      });

      markStepComplete('Token Configuration', 'contract');

      // Reset form
      setConfig({
        name: '',
        symbol: '',
        initialSupply: '',
        features: {
          mintable: false,
          burnable: false,
          pausable: false,
          staking: false,
          governance: false,
          deflation: false,
        }
      });
    } catch (error) {
      console.error('Error generating token:', error);
      alert('Failed to generate token contract. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  if (!currentProject) {
    return (
      <div className="flex items-center justify-center p-6 bg-black/30 rounded-lg border border-yellow-500/20">
        <AlertCircle className="w-5 h-5 text-yellow-500 mr-2" />
        <span className="text-yellow-500">Please select a project first</span>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Bot className="w-5 h-5 mr-2 text-purple-500" />
        Token Configuration
      </h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Token Name</label>
            <input
              type="text"
              required
              placeholder="e.g., My Awesome Token"
              value={config.name}
              onChange={(e) => setConfig({ ...config, name: e.target.value })}
              className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-colors"
            />
          </div>

          <div className="space-y-2">
            <label className="text-sm text-gray-400">Token Symbol</label>
            <input
              type="text"
              required
              placeholder="e.g., MTK"
              value={config.symbol}
              onChange={(e) => setConfig({ ...config, symbol: e.target.value })}
              className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-colors"
            />
          </div>
        </div>

        <div className="space-y-2">
          <label className="text-sm text-gray-400">Initial Supply</label>
          <div className="relative">
            <input
              type="number"
              required
              min="0"
              step="1"
              placeholder="1000000"
              value={config.initialSupply}
              onChange={(e) => setConfig({ ...config, initialSupply: e.target.value })}
              className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-colors"
            />
            <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400">
              Tokens
            </span>
          </div>
        </div>

        <div className="space-y-4">
          <label className="text-sm text-gray-400">Token Features</label>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {Object.entries(config.features).map(([feature, enabled]) => (
              <label
                key={feature}
                className="flex items-center space-x-2 p-3 bg-black/30 rounded-lg cursor-pointer hover:bg-purple-900/20 transition-colors"
              >
                <input
                  type="checkbox"
                  checked={enabled}
                  onChange={() => setConfig({
                    ...config,
                    features: {
                      ...config.features,
                      [feature]: !enabled
                    }
                  })}
                  className="form-checkbox text-purple-500 rounded border-purple-900/20"
                />
                <span className="text-gray-300 capitalize">{feature}</span>
              </label>
            ))}
          </div>
        </div>

        <div className="pt-4">
          <Button 
            type="submit" 
            variant="primary" 
            className="w-full"
            disabled={isGenerating}
          >
            {isGenerating ? 'Generating Smart Contract...' : 'Generate Smart Contract'}
          </Button>
        </div>
      </form>
    </motion.div>
  );
};

export default TokenBuilderForm;

================
File: src/components/token/TokenManagement.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Coins, BarChart3, Lock, Users, Settings } from 'lucide-react';
import Button from '../ui/Button';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

const TokenManagement = () => {
  const { currentProject } = useCurrentProject();
  const token = currentProject?.tokenConfig;
  const tokenomics = currentProject?.tokenomics;

  if (!token) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* Token Overview */}
      <div className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
        <h2 className="text-xl font-bold mb-6 flex items-center">
          <Coins className="w-5 h-5 mr-2 text-purple-500" />
          Token Overview
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="text-sm text-gray-400">Token Name</div>
            <div className="text-lg font-bold">{token.name}</div>
          </div>
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="text-sm text-gray-400">Symbol</div>
            <div className="text-lg font-bold">{token.symbol}</div>
          </div>
          <div className="p-4 bg-black/30 rounded-lg">
            <div className="text-sm text-gray-400">Total Supply</div>
            <div className="text-lg font-bold">{token.initialSupply}</div>
          </div>
        </div>
      </div>

      {/* Token Features */}
      <div className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
        <h2 className="text-xl font-bold mb-6 flex items-center">
          <Settings className="w-5 h-5 mr-2 text-purple-500" />
          Token Features
        </h2>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {Object.entries(token.features).map(([feature, enabled]) => (
            <div
              key={feature}
              className={`p-4 rounded-lg flex items-center space-x-2 ${
                enabled ? 'bg-purple-900/20 text-purple-400' : 'bg-black/30 text-gray-400'
              }`}
            >
              <div className={`w-2 h-2 rounded-full ${enabled ? 'bg-purple-500' : 'bg-gray-600'}`} />
              <span className="capitalize">{feature}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Tokenomics */}
      {tokenomics && (
        <div className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
          <h2 className="text-xl font-bold mb-6 flex items-center">
            <BarChart3 className="w-5 h-5 mr-2 text-purple-500" />
            Token Distribution
          </h2>
          <div className="space-y-4">
            {tokenomics.allocations.map((allocation, index) => (
              <div key={index} className="flex items-center justify-between p-4 bg-black/30 rounded-lg">
                <div>
                  <div className="font-medium">{allocation.category}</div>
                  <div className="text-sm text-gray-400">
                    Lock Period: {allocation.lockPeriod} months
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-bold text-purple-400">{allocation.percentage}%</div>
                  <div className="text-sm text-gray-400">
                    {(Number(tokenomics.totalSupply) * allocation.percentage / 100).toLocaleString()} tokens
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Actions */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Button variant="outline" className="flex items-center justify-center">
          <Lock className="w-4 h-4 mr-2" />
          Manage Vesting
        </Button>
        <Button variant="outline" className="flex items-center justify-center">
          <Users className="w-4 h-4 mr-2" />
          Token Holders
        </Button>
      </div>
    </motion.div>
  );
};

export default TokenManagement;

================
File: src/components/token/TokenomicsBuilder.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { PieChart, DollarSign, AlertCircle } from 'lucide-react';
import Button from '../ui/Button';
import { useCurrentProject } from '../../lib/hooks/useCurrentProject';

interface TokenAllocation {
  category: string;
  percentage: number;
  lockPeriod: number;
}

const TokenomicsBuilder = () => {
  const { currentProject, markStepComplete, updateProjectDetails } = useCurrentProject();
  const [allocations, setAllocations] = useState<TokenAllocation[]>([
    { category: 'Public Sale', percentage: 30, lockPeriod: 0 },
    { category: 'Team', percentage: 20, lockPeriod: 12 },
    { category: 'Development', percentage: 15, lockPeriod: 6 },
    { category: 'Marketing', percentage: 15, lockPeriod: 3 },
    { category: 'Liquidity', percentage: 10, lockPeriod: 24 },
    { category: 'Advisors', percentage: 10, lockPeriod: 12 }
  ]);

  const totalPercentage = allocations.reduce((sum, item) => sum + item.percentage, 0);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!currentProject) return;

    const tokenomicsData = {
      allocations,
      totalSupply: currentProject.tokenConfig?.initialSupply || '100000000',
      timestamp: Date.now()
    };

    updateProjectDetails({
      tokenomics: tokenomicsData,
      completedSteps: [...(currentProject.completedSteps || []), 'Tokenomics']
    });

    markStepComplete('Tokenomics Configuration', 'document');
  };

  const handleAllocationChange = (index: number, field: keyof TokenAllocation, value: number) => {
    const newAllocations = [...allocations];
    newAllocations[index] = { ...newAllocations[index], [field]: value };
    setAllocations(newAllocations);
  };

  if (!currentProject) {
    return (
      <div className="flex items-center justify-center p-6 bg-black/30 rounded-lg border border-yellow-500/20">
        <AlertCircle className="w-5 h-5 text-yellow-500 mr-2" />
        <span className="text-yellow-500">Please select a project first</span>
      </div>
    );
  }

  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.5 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <PieChart className="w-5 h-5 mr-2 text-purple-500" />
        Tokenomics Configuration
      </h2>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-4">
          {allocations.map((allocation, index) => (
            <div key={index} className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-black/30 rounded-lg">
              <div className="space-y-2">
                <label className="text-sm text-gray-400">Category</label>
                <input
                  type="text"
                  value={allocation.category}
                  onChange={(e) => {
                    const newAllocations = [...allocations];
                    newAllocations[index].category = e.target.value;
                    setAllocations(newAllocations);
                  }}
                  className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm text-gray-400">Percentage (%)</label>
                <input
                  type="number"
                  min="0"
                  max="100"
                  value={allocation.percentage}
                  onChange={(e) => handleAllocationChange(index, 'percentage', Number(e.target.value))}
                  className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm text-gray-400">Lock Period (months)</label>
                <input
                  type="number"
                  min="0"
                  value={allocation.lockPeriod}
                  onChange={(e) => handleAllocationChange(index, 'lockPeriod', Number(e.target.value))}
                  className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
                />
              </div>
            </div>
          ))}
        </div>

        <div className="flex items-center justify-between p-4 bg-purple-900/20 rounded-lg">
          <div className="flex items-center">
            <DollarSign className="w-5 h-5 text-purple-500 mr-2" />
            <span className="text-sm">Total Allocation:</span>
          </div>
          <span className={`font-bold ${totalPercentage === 100 ? 'text-green-500' : 'text-red-500'}`}>
            {totalPercentage}%
          </span>
        </div>

        <Button
          type="submit"
          variant="primary"
          className="w-full"
          disabled={totalPercentage !== 100}
        >
          Save Tokenomics Configuration
        </Button>
      </form>
    </motion.section>
  );
};

export default TokenomicsBuilder;

================
File: src/components/token/VestingSchedule.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Clock } from 'lucide-react';
import Button from '../ui/Button';

const VestingSchedule = () => {
  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Clock className="w-5 h-5 mr-2 text-purple-500" />
        Vesting Schedule
      </h2>
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Initial Release (%)</label>
            <input
              type="number"
              className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              placeholder="10"
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Vesting Period (months)</label>
            <input
              type="number"
              className="w-full bg-black/30 rounded-lg p-2 text-gray-300 border border-purple-900/20"
              placeholder="12"
            />
          </div>
        </div>
        <Button variant="primary" className="w-full">Generate Vesting Contract</Button>
      </div>
    </motion.section>
  );
};

export default VestingSchedule;

================
File: src/components/token/WhitePaperGenerator.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { FileText } from 'lucide-react';
import Button from '../ui/Button';

const WhitePaperGenerator = () => {
  return (
    <motion.section
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
    >
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <FileText className="w-5 h-5 mr-2 text-purple-500" />
        White Paper Generator
      </h2>
      <div className="space-y-4">
        <textarea
          className="w-full h-32 bg-black/30 rounded-lg p-4 text-gray-300 placeholder-gray-500 border border-purple-900/20 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 transition-colors"
          placeholder="Describe your project's vision, tokenomics, and use cases..."
        />
        <Button variant="primary" className="w-full">Generate White Paper</Button>
      </div>
    </motion.section>
  );
};

export default WhitePaperGenerator;

================
File: src/components/ui/Button.tsx
================
import React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '../../lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",
  {
    variants: {
      variant: {
        primary: "bg-purple-600 text-white hover:bg-purple-700",
        outline: "border-2 border-purple-600 text-purple-600 hover:bg-purple-600 hover:text-white",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3",
        lg: "h-12 px-8 text-lg",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "default",
    },
  }
);

interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = "Button";

export default Button;

================
File: src/components/ApplicationProcess.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { ClipboardCheck, Users, Rocket, Shield } from 'lucide-react';

const steps = [
  {
    icon: <ClipboardCheck className="w-8 h-8" />,
    title: 'Submit Application',
    description: 'Fill out our comprehensive application form detailing your project vision and goals'
  },
  {
    icon: <Shield className="w-8 h-8" />,
    title: 'Review Process',
    description: 'Our team reviews your application and performs necessary due diligence'
  },
  {
    icon: <Users className="w-8 h-8" />,
    title: 'Team Interview',
    description: 'Selected projects proceed to a team interview and technical assessment'
  },
  {
    icon: <Rocket className="w-8 h-8" />,
    title: 'Platform Access',
    description: 'Approved projects receive full access to our AI-powered launchpad platform'
  }
];

const ApplicationProcess = () => {
  return (
    <section className="py-24 bg-black">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold text-white mb-4">
            Application Process
          </h2>
          <p className="text-gray-400 text-xl max-w-2xl mx-auto">
            Join our exclusive community of innovative blockchain projects through our
            selective application process.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {steps.map((step, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="relative p-6 rounded-2xl bg-gradient-to-br from-purple-900/50 to-transparent border border-purple-800/50 hover:border-purple-600/50 transition-all"
            >
              {index < steps.length - 1 && (
                <div className="hidden lg:block absolute top-1/2 -right-4 w-8 h-0.5 bg-purple-600/30" />
              )}
              <div className="text-purple-500 mb-4">{step.icon}</div>
              <h3 className="text-xl font-semibold text-white mb-2">
                {step.title}
              </h3>
              <p className="text-gray-400">{step.description}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default ApplicationProcess;

================
File: src/components/ApplyForm.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Send } from 'lucide-react';
import Button from './ui/Button';
import { useAuthStore } from '../lib/store/useAuthStore';

const ApplyForm = () => {
  const [formData, setFormData] = useState({
    projectName: '',
    projectType: '',
    description: '',
    teamSize: '',
    email: '',
  });

  const setApproved = useAuthStore((state) => state.setApproved);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // In a real application, this would send the application to a backend
    // For demo purposes, we'll just set approved to true
    setApproved(true);
    alert('Application submitted successfully! You now have access to the platform.');
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-2xl mx-auto p-6 bg-zinc-900/50 rounded-2xl border border-purple-900/20"
    >
      <h2 className="text-2xl font-bold mb-6">Apply for Platform Access</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-2">
          <label className="text-sm text-gray-400">Project Name</label>
          <input
            type="text"
            required
            className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
            value={formData.projectName}
            onChange={(e) => setFormData({ ...formData, projectName: e.target.value })}
          />
        </div>

        <div className="space-y-2">
          <label className="text-sm text-gray-400">Project Type</label>
          <select
            required
            className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
            value={formData.projectType}
            onChange={(e) => setFormData({ ...formData, projectType: e.target.value })}
          >
            <option value="">Select project type</option>
            <option value="defi">DeFi Protocol</option>
            <option value="nft">NFT Platform</option>
            <option value="gamefi">GameFi</option>
            <option value="dao">DAO</option>
          </select>
        </div>

        <div className="space-y-2">
          <label className="text-sm text-gray-400">Project Description</label>
          <textarea
            required
            className="w-full h-32 bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Team Size</label>
            <input
              type="number"
              required
              className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
              value={formData.teamSize}
              onChange={(e) => setFormData({ ...formData, teamSize: e.target.value })}
            />
          </div>
          <div className="space-y-2">
            <label className="text-sm text-gray-400">Contact Email</label>
            <input
              type="email"
              required
              className="w-full bg-black/30 rounded-lg p-3 text-gray-300 border border-purple-900/20"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            />
          </div>
        </div>

        <Button type="submit" variant="primary" className="w-full">
          Submit Application
          <Send className="w-4 h-4 ml-2" />
        </Button>
      </form>
    </motion.div>
  );
};

export default ApplyForm;

================
File: src/components/CTA.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Rocket } from 'lucide-react';
import { Link } from 'react-router-dom';
import Button from './ui/Button';

const CTA = () => {
  return (
    <section className="py-24 bg-gradient-to-b from-purple-900/20 to-black relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 bg-gradient-radial from-purple-500/10 via-transparent to-transparent" />
      
      <div className="container mx-auto px-6 relative">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="max-w-3xl mx-auto text-center"
        >
          <h2 className="text-4xl md:text-5xl font-bold mb-6">
            Ready to Join the Future of Web3?
          </h2>
          <p className="text-xl text-gray-300 mb-8">
            Apply now to access our exclusive AI-powered launchpad platform and transform your blockchain vision into reality.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link to="/apply">
              <Button variant="primary" size="lg">
                Apply Now
                <Rocket className="w-5 h-5 ml-2" />
              </Button>
            </Link>
            <Button variant="outline" size="lg">
              Schedule Demo
              <ArrowRight className="w-5 h-5 ml-2" />
            </Button>
          </div>
          <p className="mt-6 text-sm text-gray-400">
            Limited spots available. Applications are reviewed within 48 hours.
          </p>
        </motion.div>
      </div>

      {/* 3D Grid Effect */}
      <div 
        className="absolute inset-0 pointer-events-none opacity-30"
        style={{
          backgroundImage: `linear-gradient(rgba(139, 92, 246, 0.1) 1px, transparent 1px),
                           linear-gradient(90deg, rgba(139, 92, 246, 0.1) 1px, transparent 1px)`,
          backgroundSize: '40px 40px',
          transform: 'perspective(1000px) rotateX(60deg) scale(2)',
        }}
      />
    </section>
  );
}

export default CTA;

================
File: src/components/Features.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import FeatureGrid from './features/FeatureGrid';

const Features = () => {
  return (
    <section className="py-24 bg-black">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold text-white mb-4">
            Comprehensive Launch Platform
          </h2>
          <p className="text-gray-400 text-xl max-w-2xl mx-auto">
            Everything you need to build, launch, and grow your blockchain project,
            powered by cutting-edge AI technology.
          </p>
        </motion.div>
        <FeatureGrid />
      </div>
    </section>
  );
};

export default Features;

================
File: src/components/Hero.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import HeroBackground from './hero/HeroBackground';
import HeroTitle from './hero/HeroTitle';
import HeroSubtitle from './hero/HeroSubtitle';
import HeroActions from './hero/HeroActions';
import Robot3D from './hero/Robot3D';
import FloatingElements from './hero/FloatingElements';

const Hero = () => {
  return (
    <div className="relative min-h-screen bg-gradient-to-b from-black to-purple-900 overflow-hidden">
      <FloatingElements />
      <HeroBackground />
      
      <div className="relative container mx-auto px-6 pt-32 pb-24">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1 }}
          className="text-center"
        >
          <div className="mb-12">
            <Robot3D />
          </div>

          <motion.div
            className="relative"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
          >
            <HeroTitle />
            <HeroSubtitle />
            <HeroActions />
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
};

export default Hero;

================
File: src/components/Navbar.tsx
================
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useWeb3Modal } from '@web3modal/wagmi/react';
import { motion } from 'framer-motion';
import { 
  LayoutDashboard, 
  Rocket, 
  FileCode2, 
  Shield, 
  FolderKanban, 
  Globe 
} from 'lucide-react';
import Button from './ui/Button';
import { useWalletAuth } from '../lib/hooks/useWalletAuth';
import ProjectSelector from './ProjectSelector';

const Navbar = () => {
  const { open } = useWeb3Modal();
  const location = useLocation();
  const { isConnected, isApproved } = useWalletAuth();

  const protectedNavItems = [
    { path: '/dashboard', label: 'Dashboard', icon: <LayoutDashboard className="w-4 h-4" /> },
    { path: '/token-builder', label: 'Token Builder', icon: <FileCode2 className="w-4 h-4" /> },
    { path: '/smart-contract-auditor', label: 'Auditor', icon: <Shield className="w-4 h-4" /> },
    { path: '/project-manager', label: 'Project', icon: <FolderKanban className="w-4 h-4" /> },
    { path: '/launch', label: 'Launch', icon: <Rocket className="w-4 h-4" /> },
  ];

  const publicNavItems = [
    { path: '/community', label: 'Community', icon: <Globe className="w-4 h-4" /> },
  ];

  const navItems = isConnected && isApproved ? [...protectedNavItems, ...publicNavItems] : publicNavItems;

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-lg border-b border-purple-900/20">
      <div className="container mx-auto px-6">
        <div className="flex items-center justify-between h-20">
          <div className="flex items-center space-x-4">
            <Link to="/" className="flex items-center space-x-2">
              <Rocket className="w-8 h-8 text-purple-500" />
              <span className="text-xl font-bold">AI Launchpad</span>
            </Link>
            {isConnected && isApproved && <ProjectSelector />}
          </div>

          <div className="flex items-center space-x-8">
            <div className="hidden md:flex items-center space-x-4">
              {navItems.map((item) => (
                <motion.div
                  key={item.path}
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                >
                  <Link
                    to={item.path}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                      location.pathname === item.path
                        ? 'text-purple-500 bg-purple-900/20'
                        : 'text-gray-400 hover:text-purple-400 hover:bg-purple-900/10'
                    }`}
                  >
                    {item.icon}
                    <span>{item.label}</span>
                  </Link>
                </motion.div>
              ))}
            </div>
            <Button 
              variant="primary"
              onClick={() => open()}
            >
              {isConnected ? 'Connected' : 'Connect Wallet'}
            </Button>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

================
File: src/components/Pricing.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Check } from 'lucide-react';
import Button from './ui/Button';

const plans = [
  {
    name: 'Starter',
    price: '499',
    features: [
      'AI-powered contract analysis',
      'Basic security audits',
      'Up to 5 deployments/month',
      'Community support'
    ]
  },
  {
    name: 'Pro',
    price: '999',
    popular: true,
    features: [
      'Advanced AI optimization',
      'Comprehensive security audits',
      'Unlimited deployments',
      'Priority support',
      'Custom contract templates',
      'API access'
    ]
  },
  {
    name: 'Enterprise',
    price: 'Custom',
    features: [
      'Full platform customization',
      'Dedicated AI resources',
      'Custom security rules',
      'Dedicated support team',
      'SLA guarantees',
      'On-premise deployment'
    ]
  }
];

const Pricing = () => {
  return (
    <section className="py-24 bg-black">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold mb-4">Simple, Transparent Pricing</h2>
          <p className="text-gray-400 text-xl max-w-2xl mx-auto">
            Choose the perfect plan for your blockchain journey
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {plans.map((plan, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className={`relative p-8 rounded-2xl border ${
                plan.popular
                  ? 'border-purple-500 bg-gradient-to-br from-purple-900/50 to-transparent'
                  : 'border-purple-800/30 bg-gradient-to-br from-purple-900/20 to-transparent'
              }`}
            >
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 -translate-x-1/2 bg-purple-600 text-white px-4 py-1 rounded-full text-sm">
                  Most Popular
                </div>
              )}
              <h3 className="text-2xl font-bold mb-2">{plan.name}</h3>
              <div className="mb-6">
                <span className="text-4xl font-bold">${plan.price}</span>
                {plan.price !== 'Custom' && <span className="text-gray-400">/month</span>}
              </div>
              <ul className="space-y-4 mb-8">
                {plan.features.map((feature, i) => (
                  <li key={i} className="flex items-center text-gray-300">
                    <Check className="w-5 h-5 text-purple-500 mr-2" />
                    {feature}
                  </li>
                ))}
              </ul>
              <Button
                variant={plan.popular ? 'primary' : 'outline'}
                className="w-full"
              >
                Get Started
              </Button>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

export default Pricing;

================
File: src/components/ProjectContext.tsx
================
import React from 'react';
import { useLocation } from 'react-router-dom';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';

const ProjectContext = () => {
  const location = useLocation();
  const { currentProject } = useCurrentProject();

  // Update page title based on current project
  React.useEffect(() => {
    if (currentProject) {
      document.title = `${currentProject.name} - AI Launchpad`;
    } else {
      document.title = 'AI Launchpad';
    }
  }, [currentProject]);

  // Add project context to window for AI assistance
  React.useEffect(() => {
    if (currentProject) {
      (window as any).currentProject = {
        id: currentProject.id,
        name: currentProject.name,
        type: currentProject.type,
        progress: currentProject.progress,
        completedSteps: currentProject.completedSteps,
      };
    } else {
      (window as any).currentProject = null;
    }
  }, [currentProject, location.pathname]);

  return null;
};

export default ProjectContext;

================
File: src/components/ProjectSelector.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { ChevronDown, FolderKanban } from 'lucide-react';
import { useProjectStore } from '../lib/store/useProjectStore';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';

const ProjectSelector = () => {
  const [isOpen, setIsOpen] = React.useState(false);
  const projects = useProjectStore((state) => state.projects);
  const { currentProject, setCurrentProject } = useCurrentProject();

  if (projects.length === 0) {
    return null;
  }

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-zinc-900/50 hover:bg-purple-900/20 transition-colors border border-purple-900/20"
      >
        <FolderKanban className="w-4 h-4 text-purple-500" />
        <span className="text-sm truncate max-w-[150px]">
          {currentProject?.name || 'Select Project'}
        </span>
        <ChevronDown className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
          />
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="absolute z-50 mt-2 w-56 rounded-lg bg-zinc-900 border border-purple-900/20 shadow-lg py-1"
          >
            {projects.map((project) => (
              <button
                key={project.id}
                onClick={() => {
                  setCurrentProject(project.id);
                  setIsOpen(false);
                }}
                className={`w-full text-left px-4 py-2 text-sm hover:bg-purple-900/20 transition-colors flex items-center space-x-2 ${
                  currentProject?.id === project.id ? 'text-purple-500' : 'text-gray-300'
                }`}
              >
                <FolderKanban className="w-4 h-4" />
                <span className="truncate">{project.name}</span>
              </button>
            ))}
          </motion.div>
        </>
      )}
    </div>
  );
};

export default ProjectSelector;

================
File: src/components/ProtectedRoute.tsx
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAccount } from 'wagmi';
import { useAuthStore } from '../lib/store/useAuthStore';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isConnected } = useAccount();
  const isApproved = useAuthStore((state) => state.isApproved);

  if (!isConnected || !isApproved) {
    return <Navigate to="/" />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: src/components/Stats.tsx
================
import React from 'react';
import { motion } from 'framer-motion';

const stats = [
  { value: '500+', label: 'Projects Launched' },
  { value: '$100M+', label: 'Total Raised' },
  { value: '50k+', label: 'Smart Contracts Generated' },
  { value: '99.9%', label: 'Security Score' }
];

const Stats = () => {
  return (
    <section className="py-20 bg-gradient-to-b from-purple-900 to-black">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="text-center"
            >
              <motion.div
                className="text-4xl md:text-5xl font-bold text-white mb-2"
                initial={{ scale: 0.5 }}
                whileInView={{ scale: 1 }}
                viewport={{ once: true }}
                transition={{ 
                  type: "spring",
                  stiffness: 100,
                  delay: index * 0.1 
                }}
              >
                {stat.value}
              </motion.div>
              <div className="text-purple-300">{stat.label}</div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default Stats;

================
File: src/components/Testimonials.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Star } from 'lucide-react';

const testimonials = [
  {
    name: 'Sarah Chen',
    role: 'Founder, DeFi Protocol',
    content: 'The AI-powered smart contract analysis saved us countless hours and helped us identify potential vulnerabilities before launch.',
    image: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?auto=format&fit=crop&w=150&h=150'
  },
  {
    name: 'Michael Rodriguez',
    role: 'CTO, NFT Marketplace',
    content: 'This platform revolutionized our development process. The AI suggestions were incredibly accurate and helpful.',
    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=150&h=150'
  },
  {
    name: 'Emily Watson',
    role: 'Lead Developer, GameFi',
    content: 'The automated security audits gave us peace of mind. We launched our project with confidence knowing it was thoroughly tested.',
    image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=150&h=150'
  }
];

const Testimonials = () => {
  return (
    <section className="py-24 bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold mb-4">Trusted by Innovators</h2>
          <p className="text-gray-400 text-xl max-w-2xl mx-auto">
            See what blockchain pioneers are saying about our platform
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {testimonials.map((testimonial, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ delay: index * 0.2 }}
              className="bg-gradient-to-br from-purple-900/30 to-transparent p-6 rounded-2xl border border-purple-800/30"
            >
              <div className="flex items-center mb-4">
                {[...Array(5)].map((_, i) => (
                  <Star key={i} className="w-5 h-5 text-yellow-500 fill-yellow-500" />
                ))}
              </div>
              <p className="text-gray-300 mb-6">{testimonial.content}</p>
              <div className="flex items-center">
                <img
                  src={testimonial.image}
                  alt={testimonial.name}
                  className="w-12 h-12 rounded-full mr-4"
                />
                <div>
                  <h4 className="font-semibold">{testimonial.name}</h4>
                  <p className="text-purple-400">{testimonial.role}</p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}

export default Testimonials;

================
File: src/components/WalletApproval.tsx
================
import React from 'react';
import { useWalletAuth } from '../lib/hooks/useWalletAuth';

const WalletApproval = () => {
  useWalletAuth();
  return null;
};

export default WalletApproval;

================
File: src/hooks/useProjectProgress.ts
================
import { useEffect } from 'react';
import { useProjectStore } from '../lib/store/useProjectStore';
import { useActivityStore } from '../lib/store/useActivityStore';
import { v4 as uuidv4 } from 'uuid';

export const useProjectProgress = (projectId: string) => {
  const { updateProject, updateProjectProgress } = useProjectStore();
  const { addActivity } = useActivityStore();

  const markStepComplete = (step: string) => {
    const project = useProjectStore.getState().projects.find(p => p.id === projectId);
    if (!project) return;

    const updatedSteps = [...new Set([...project.completedSteps, step])];
    updateProject(projectId, { completedSteps: updatedSteps });
    updateProjectProgress(projectId);

    addActivity({
      id: uuidv4(),
      projectId,
      type: 'document',
      message: `Completed step: ${step}`,
      timestamp: Date.now()
    });
  };

  const updateAuditStatus = (status: string, score: number) => {
    updateProject(projectId, { auditStatus: status, securityScore: score });
    addActivity({
      id: uuidv4(),
      projectId,
      type: 'audit',
      message: `Security audit completed with score: ${score}`,
      timestamp: Date.now()
    });
  };

  const updateContractAddress = (address: string) => {
    updateProject(projectId, { contractAddress: address });
    addActivity({
      id: uuidv4(),
      projectId,
      type: 'contract',
      message: `Smart contract deployed at: ${address}`,
      timestamp: Date.now()
    });
  };

  return {
    markStepComplete,
    updateAuditStatus,
    updateContractAddress
  };
};

================
File: src/lib/ai/hooks/useAIChat.ts
================
import { useState } from 'react';
import type { AIMessage } from '../types';
import { useAIContext } from '../AIContext';

export const useAIChat = () => {
  const [messages, setMessages] = useState<AIMessage[]>([]);
  const { isProcessing, sendMessage } = useAIContext();

  const addMessage = async (content: string) => {
    const userMessage: AIMessage = { role: 'user', content };
    setMessages(prev => [...prev, userMessage]);

    try {
      const response = await sendMessage(content);
      const assistantMessage: AIMessage = { role: 'assistant', content: response };
      setMessages(prev => [...prev, assistantMessage]);
      return response;
    } catch (error) {
      const errorMessage: AIMessage = {
        role: 'assistant',
        content: 'Sorry, I encountered an error processing your request.'
      };
      setMessages(prev => [...prev, errorMessage]);
      throw error;
    }
  };

  const clearMessages = () => setMessages([]);

  return {
    messages,
    addMessage,
    clearMessages,
    isProcessing
  };
};

================
File: src/lib/ai/hooks/useSmartContractAI.ts
================
```typescript
import { useAIContext } from '../AIProvider';
import { useCurrentProject } from '../../hooks/useCurrentProject';
import { generatePrompt, sanitizeCode, parseAIResponse } from '../helpers';
import type { AIAnalysisResult, AIGasOptimizationResult } from '../types';

export const useSmartContractAI = () => {
  const { generateSmartContract, analyzeContract, optimizeGas, isProcessing } = useAIContext();
  const { currentProject, markStepComplete } = useCurrentProject();

  const generateContract = async (requirements: string) => {
    if (!currentProject) throw new Error('No project selected');

    const prompt = generatePrompt('TOKEN_GENERATION', {
      ...requirements,
      projectContext: currentProject
    });

    const result = await generateSmartContract(prompt);
    const code = sanitizeCode(result);

    markStepComplete('Smart Contract Generation', 'contract');
    return code;
  };

  const analyze = async (code: string): Promise<AIAnalysisResult> => {
    const prompt = generatePrompt('CONTRACT_ANALYSIS', { code });
    const result = await analyzeContract(prompt);
    return parseAIResponse(result);
  };

  const optimize = async (code: string): Promise<AIGasOptimizationResult> => {
    const prompt = generatePrompt('GAS_OPTIMIZATION', { code });
    const result = await optimizeGas(prompt);
    return parseAIResponse(result);
  };

  return {
    generateContract,
    analyze,
    optimize,
    isProcessing
  };
};
```

================
File: src/lib/ai/hooks/useTokenomicsAI.ts
================
```typescript
import { useAIContext } from '../AIProvider';
import { useCurrentProject } from '../../hooks/useCurrentProject';
import { generatePrompt, parseAIResponse } from '../helpers';
import type { AITokenomicsResult } from '../types';

export const useTokenomicsAI = () => {
  const { complete, isProcessing } = useAIContext();
  const { currentProject, markStepComplete } = useCurrentProject();

  const analyzeTokenomics = async (tokenomics: any): Promise<AITokenomicsResult> => {
    if (!currentProject) throw new Error('No project selected');

    const prompt = generatePrompt('TOKENOMICS_ANALYSIS', {
      tokenomics: JSON.stringify(tokenomics),
      projectContext: currentProject
    });

    const result = await complete(prompt);
    const analysis = parseAIResponse(result);

    markStepComplete('Tokenomics Analysis', 'document');
    return analysis;
  };

  return {
    analyzeTokenomics,
    isProcessing
  };
};
```

================
File: src/lib/ai/hooks/useWhitepaperAI.ts
================
```typescript
import { useAIContext } from '../AIProvider';
import { useCurrentProject } from '../../hooks/useCurrentProject';
import { generatePrompt, parseAIResponse } from '../helpers';
import type { AIWhitepaperResult } from '../types';

export const useWhitepaperAI = () => {
  const { generateWhitepaper, isProcessing } = useAIContext();
  const { currentProject, markStepComplete } = useCurrentProject();

  const generateWhitepaperContent = async (projectInfo: string): Promise<AIWhitepaperResult> => {
    if (!currentProject) throw new Error('No project selected');

    const prompt = generatePrompt('WHITEPAPER_GENERATION', {
      projectName: currentProject.name,
      projectInfo,
      tokenomics: currentProject.tokenomics,
      projectContext: currentProject
    });

    const result = await generateWhitepaper(prompt);
    const whitepaper = parseAIResponse(result);

    markStepComplete('Whitepaper Generation', 'document');
    return whitepaper;
  };

  return {
    generateWhitepaperContent,
    isProcessing
  };
};
```

================
File: src/lib/ai/services/AIService.ts
================
import type { AIResponse } from '../types';
import { formatAIPrompt, parseAIResponse } from '../helpers';

const API_URL = '/api/ai';

export class AIService {
  static async sendMessage(message: string): Promise<AIResponse> {
    const response = await fetch(`${API_URL}/completion`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt: message })
    });

    if (!response.ok) {
      throw new Error('Failed to send message');
    }

    const data = await response.json();
    return parseAIResponse(data);
  }

  static async generateContract(requirements: string): Promise<AIResponse> {
    const response = await fetch(`${API_URL}/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type: 'contract', requirements })
    });

    if (!response.ok) {
      throw new Error('Failed to generate contract');
    }

    const data = await response.json();
    return parseAIResponse(data);
  }

  static async analyzeCode(code: string): Promise<AIResponse> {
    const response = await fetch(`${API_URL}/analyze`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ code })
    });

    if (!response.ok) {
      throw new Error('Failed to analyze code');
    }

    const data = await response.json();
    return parseAIResponse(data);
  }
}

================
File: src/lib/ai/services/ContractGenerationService.ts
================
import { AIService } from './AIService';
import { CONTRACT_PROMPTS } from '../prompts';
import { formatAIPrompt } from '../helpers';
import type { TokenConfig } from '../../store/useProjectStore';

export class ContractGenerationService {
  static async generateContract(config: TokenConfig): Promise<string> {
    const prompt = formatAIPrompt(CONTRACT_PROMPTS.TOKEN_GENERATION, {
      name: config.name,
      symbol: config.symbol,
      initialSupply: config.initialSupply,
      features: JSON.stringify(config.features)
    });

    const response = await AIService.sendMessage(prompt);
    return response.data?.code || '';
  }

  static async analyzeContract(code: string) {
    const prompt = formatAIPrompt(CONTRACT_PROMPTS.CONTRACT_ANALYSIS, { code });
    const response = await AIService.sendMessage(prompt);
    return response.data || {
      vulnerabilities: [],
      suggestions: [],
      score: 0
    };
  }

  static async optimizeContract(code: string) {
    const prompt = formatAIPrompt(CONTRACT_PROMPTS.CONTRACT_OPTIMIZATION, { code });
    const response = await AIService.sendMessage(prompt);
    return response.data?.optimizedCode || code;
  }
}

================
File: src/lib/ai/AIContext.tsx
================
import React, { createContext, useContext, useState } from 'react';
import type { AIContextType, AIResponse } from './types';
import { useCurrentProject } from '../hooks/useCurrentProject';
import { AIService } from './services/AIService';

const AIContext = createContext<AIContextType | null>(null);

export const AIProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const { currentProject } = useCurrentProject();

  const sendMessage = async (message: string): Promise<string> => {
    setIsProcessing(true);
    try {
      const response = await AIService.sendMessage(message);
      return response.message;
    } finally {
      setIsProcessing(false);
    }
  };

  const generateContract = async (requirements: string): Promise<string> => {
    setIsProcessing(true);
    try {
      const response = await AIService.generateContract(requirements);
      return response.data?.code || '';
    } finally {
      setIsProcessing(false);
    }
  };

  const analyzeCode = async (code: string) => {
    setIsProcessing(true);
    try {
      const response = await AIService.analyzeCode(code);
      return {
        vulnerabilities: response.data?.vulnerabilities || [],
        optimizations: response.data?.optimizations || [],
        score: response.data?.score || 0
      };
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <AIContext.Provider
      value={{
        isProcessing,
        sendMessage,
        generateContract,
        analyzeCode
      }}
    >
      {children}
    </AIContext.Provider>
  );
};

export const useAIContext = () => {
  const context = useContext(AIContext);
  if (!context) {
    throw new Error('useAIContext must be used within an AIProvider');
  }
  return context;
};

================
File: src/lib/ai/AIProvider.tsx
================
import React, { createContext, useContext, useState } from 'react';
import { useAI } from './useAI';

interface AIContextType {
  generateSmartContract: (requirements: string) => Promise<string>;
  analyzeContract: (code: string) => Promise<{
    vulnerabilities: string[];
    suggestions: string[];
    score: number;
  }>;
  generateWhitepaper: (projectInfo: string) => Promise<string>;
  optimizeGas: (code: string) => Promise<{
    optimizedCode: string;
    savings: string;
  }>;
  isProcessing: boolean;
}

const AIContext = createContext<AIContextType | null>(null);

export const AIProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { complete, isLoading } = useAI();
  const [isProcessing, setIsProcessing] = useState(false);

  const generateSmartContract = async (requirements: string) => {
    setIsProcessing(true);
    try {
      const result = await complete(`Generate a secure ERC20 smart contract with the following requirements: ${requirements}`);
      return result || '';
    } finally {
      setIsProcessing(false);
    }
  };

  const analyzeContract = async (code: string) => {
    setIsProcessing(true);
    try {
      const result = await complete(`Analyze this smart contract for security vulnerabilities and optimization opportunities: ${code}`);
      const analysis = JSON.parse(result || '{}');
      return {
        vulnerabilities: analysis.vulnerabilities || [],
        suggestions: analysis.suggestions || [],
        score: analysis.score || 0,
      };
    } finally {
      setIsProcessing(false);
    }
  };

  const generateWhitepaper = async (projectInfo: string) => {
    setIsProcessing(true);
    try {
      const result = await complete(`Generate a comprehensive whitepaper for this blockchain project: ${projectInfo}`);
      return result || '';
    } finally {
      setIsProcessing(false);
    }
  };

  const optimizeGas = async (code: string) => {
    setIsProcessing(true);
    try {
      const result = await complete(`Optimize this smart contract for gas efficiency: ${code}`);
      const optimization = JSON.parse(result || '{}');
      return {
        optimizedCode: optimization.code || code,
        savings: optimization.savings || '0%',
      };
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <AIContext.Provider value={{
      generateSmartContract,
      analyzeContract,
      generateWhitepaper,
      optimizeGas,
      isProcessing: isProcessing || isLoading,
    }}>
      {children}
    </AIContext.Provider>
  );
};

export const useAIContext = () => {
  const context = useContext(AIContext);
  if (!context) {
    throw new Error('useAIContext must be used within an AIProvider');
  }
  return context;
};

================
File: src/lib/ai/helpers.ts
================
import type { AIResponse } from './types';

export const formatAIPrompt = (template: string, variables: Record<string, any>): string => {
  return template.replace(
    /\{\{(\w+)\}\}/g,
    (match, key) => variables[key]?.toString() || match
  );
};

export const parseAIResponse = (response: string): AIResponse => {
  try {
    return JSON.parse(response);
  } catch (error) {
    return {
      message: 'Failed to parse AI response',
      type: 'error',
      data: response
    };
  }
};

export const sanitizeCode = (code: string): string => {
  return code
    .replace(/```[a-z]*\n/g, '')
    .replace(/```/g, '')
    .trim();
};

================
File: src/lib/ai/prompts.ts
================
export const CONTRACT_PROMPTS = {
  TOKEN_GENERATION: `
Generate a secure ERC20 smart contract with the following specifications:
- Token Name: {{name}}
- Symbol: {{symbol}}
- Initial Supply: {{initialSupply}}
- Features: {{features}}

Include the following security considerations:
- Reentrancy protection
- Integer overflow protection
- Access control
- Events for all important state changes
`,

  CONTRACT_ANALYSIS: `
Analyze this smart contract for:
1. Security vulnerabilities
2. Gas optimization opportunities
3. Best practices compliance
4. Code quality and maintainability

Provide detailed feedback in JSON format.
`,

  CONTRACT_OPTIMIZATION: `
Optimize the following smart contract for:
1. Gas efficiency
2. Code readability
3. Security best practices

Contract code:
{{code}}
`
};

================
File: src/lib/ai/types.ts
================
export interface AIMessage {
  role: 'user' | 'assistant';
  content: string;
}

export interface AIContextType {
  isProcessing: boolean;
  sendMessage: (message: string) => Promise<string>;
  generateContract: (requirements: string) => Promise<string>;
  analyzeCode: (code: string) => Promise<{
    vulnerabilities: string[];
    suggestions: string[];
  }>;
}

export interface AIResponse {
  message: string;
  type: 'success' | 'error';
  data?: any;
}

================
File: src/lib/ai/useAI.ts
================
import { useCallback } from "react";
import { useCompletion } from "ai/react";
import { useCurrentProject } from "../hooks/useCurrentProject";

export const useAI = () => {
  const { currentProject } = useCurrentProject();

  const { complete: rawComplete, completion, isLoading } = useCompletion({
    api: '/api/ai/completion',
  });

  const complete = useCallback(async (prompt: string) => {
    const projectContext = currentProject ? {
      name: currentProject.name,
      type: currentProject.type,
      tokenConfig: currentProject.tokenConfig,
      tokenomics: currentProject.tokenomics,
      completedSteps: currentProject.completedSteps,
    } : null;

    return rawComplete(JSON.stringify({
      prompt,
      projectContext,
    }));
  }, [currentProject, rawComplete]);

  return {
    complete,
    completion,
    isLoading,
  };
};

================
File: src/lib/constants/features.ts
================
import { Bot, Code, Shield, Zap } from 'lucide-react';

export const features = [
  {
    icon: Bot,
    title: 'AI-Powered Analysis',
    description: 'Smart contract analysis and optimization using advanced AI algorithms'
  },
  {
    icon: Shield,
    title: 'Enhanced Security',
    description: 'Automated security audits and vulnerability detection'
  },
  {
    icon: Code,
    title: 'Smart Contract Generation',
    description: 'AI-assisted smart contract development and testing'
  },
  {
    icon: Zap,
    title: 'Quick Deployment',
    description: 'Streamlined deployment process across multiple blockchains'
  }
];

================
File: src/lib/constants/pricing.ts
================
export const plans = [
  {
    name: 'Starter',
    price: '499',
    features: [
      'AI-powered contract analysis',
      'Basic security audits',
      'Up to 5 deployments/month',
      'Community support'
    ]
  },
  {
    name: 'Pro',
    price: '999',
    popular: true,
    features: [
      'Advanced AI optimization',
      'Comprehensive security audits',
      'Unlimited deployments',
      'Priority support',
      'Custom contract templates',
      'API access'
    ]
  },
  {
    name: 'Enterprise',
    price: 'Custom',
    features: [
      'Full platform customization',
      'Dedicated AI resources',
      'Custom security rules',
      'Dedicated support team',
      'SLA guarantees',
      'On-premise deployment'
    ]
  }
];

================
File: src/lib/constants/stats.ts
================
export const stats = [
  { value: '500+', label: 'Projects Launched' },
  { value: '$100M+', label: 'Total Raised' },
  { value: '50k+', label: 'Smart Contracts Generated' },
  { value: '99.9%', label: 'Security Score' }
];

================
File: src/lib/constants/testimonials.ts
================
export const testimonials = [
  {
    name: 'Sarah Chen',
    role: 'Founder, DeFi Protocol',
    content: 'The AI-powered smart contract analysis saved us countless hours and helped us identify potential vulnerabilities before launch.',
    image: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?auto=format&fit=crop&w=150&h=150'
  },
  {
    name: 'Michael Rodriguez',
    role: 'CTO, NFT Marketplace',
    content: 'This platform revolutionized our development process. The AI suggestions were incredibly accurate and helpful.',
    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=150&h=150'
  },
  {
    name: 'Emily Watson',
    role: 'Lead Developer, GameFi',
    content: 'The automated security audits gave us peace of mind. We launched our project with confidence knowing it was thoroughly tested.',
    image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=150&h=150'
  }
];

================
File: src/lib/hooks/useCurrentProject.ts
================
import { useProjectStore } from '../store/useProjectStore';
import { useCurrentProjectStore } from '../store/useCurrentProjectStore';
import { useActivityStore } from '../store/useActivityStore';
import { v4 as uuidv4 } from 'uuid';
import type { Project } from '../store/useProjectStore';

export const useCurrentProject = () => {
  const currentProjectId = useCurrentProjectStore((state) => state.currentProjectId);
  const setCurrentProject = useCurrentProjectStore((state) => state.setCurrentProject);
  const projects = useProjectStore((state) => state.projects);
  const { addActivity } = useActivityStore();
  const { updateProject, updateProjectProgress } = useProjectStore();

  const currentProject = projects.find(p => p.id === currentProjectId);

  const markStepComplete = (step: string, type: 'audit' | 'contract' | 'launch' | 'team' | 'document') => {
    if (!currentProjectId) return;

    const updatedSteps = [...new Set([...(currentProject?.completedSteps || []), step])];
    updateProject(currentProjectId, { completedSteps: updatedSteps });
    updateProjectProgress(currentProjectId);

    addActivity({
      id: uuidv4(),
      projectId: currentProjectId,
      type,
      message: `Completed step: ${step}`,
      timestamp: Date.now()
    });
  };

  const updateProjectDetails = (updates: Partial<Project>) => {
    if (!currentProjectId) return;
    updateProject(currentProjectId, updates);
  };

  return {
    currentProject,
    setCurrentProject,
    markStepComplete,
    updateProjectDetails,
  };
};

================
File: src/lib/hooks/useWalletAuth.ts
================
import { useEffect } from 'react';
import { useAccount } from 'wagmi';
import { useAuthStore } from '../store/useAuthStore';

export const useWalletAuth = () => {
  const { address, isConnected } = useAccount();
  const { checkWalletApproval, setApproved } = useAuthStore();

  useEffect(() => {
    if (isConnected && address) {
      const isWalletApproved = checkWalletApproval(address);
      setApproved(isWalletApproved);
    } else {
      setApproved(false);
    }
  }, [address, isConnected, checkWalletApproval, setApproved]);

  return {
    isApproved: isConnected && address ? checkWalletApproval(address) : false,
    address,
    isConnected
  };
};

================
File: src/lib/routes/ProtectedRoute.tsx
================
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAccount } from 'wagmi';
import { useAuthStore } from '../store/useAuthStore';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isConnected, address } = useAccount();
  const { checkWalletApproval } = useAuthStore();
  const location = useLocation();

  if (!isConnected || !address || !checkWalletApproval(address)) {
    return <Navigate to="/" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: src/lib/store/useActivityStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface Activity {
  id: string;
  projectId: string;
  type: 'audit' | 'contract' | 'launch' | 'team' | 'document';
  message: string;
  timestamp: number;
  icon?: string;
}

interface ActivityState {
  activities: Activity[];
  addActivity: (activity: Activity) => void;
}

export const useActivityStore = create<ActivityState>()(
  persist(
    (set) => ({
      activities: [],
      addActivity: (activity) =>
        set((state) => ({
          activities: [activity, ...state.activities].slice(0, 50) // Keep last 50 activities
        }))
    }),
    {
      name: 'activity-storage'
    }
  )
);

================
File: src/lib/store/useAuthStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface AuthState {
  isApproved: boolean;
  approvedWallets: string[];
  setApproved: (status: boolean) => void;
  addApprovedWallet: (wallet: string) => void;
  checkWalletApproval: (wallet: string) => boolean;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      isApproved: false,
      approvedWallets: [
        '0x9b1368A29E0b2824094A0faACdb67010E79a316f'.toLowerCase()
      ],
      setApproved: (status) => set({ isApproved: status }),
      addApprovedWallet: (wallet) => 
        set((state) => ({
          approvedWallets: [...state.approvedWallets, wallet.toLowerCase()]
        })),
      checkWalletApproval: (wallet) => {
        if (!wallet) return false;
        const state = get();
        return state.approvedWallets.includes(wallet.toLowerCase());
      },
    }),
    {
      name: 'auth-storage',
      version: 1,
    }
  )
);

================
File: src/lib/store/useCurrentProjectStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface CurrentProjectState {
  currentProjectId: string | null;
  setCurrentProject: (projectId: string | null) => void;
}

export const useCurrentProjectStore = create<CurrentProjectState>()(
  persist(
    (set) => ({
      currentProjectId: null,
      setCurrentProject: (projectId) => set({ currentProjectId: projectId }),
    }),
    {
      name: 'current-project-storage'
    }
  )
);

================
File: src/lib/store/useProjectStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface TokenConfig {
  name: string;
  symbol: string;
  initialSupply: string;
  features: {
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    staking: boolean;
    governance: boolean;
    deflation: boolean;
  };
}

export interface Contract {
  id: string;
  name: string;
  code: string;
  address?: string;
  createdAt: string;
  verified: boolean;
  audited: boolean;
}

export interface Project {
  id: string;
  name: string;
  type: string;
  status: string;
  progress: number;
  completedSteps: string[];
  tokenConfig?: TokenConfig;
  tokenomics?: {
    allocations: Array<{
      category: string;
      percentage: number;
      lockPeriod: number;
    }>;
    totalSupply: string;
    timestamp: number;
  };
  contracts: Contract[];
  contractAddress?: string;
  auditStatus?: string;
  securityScore?: number;
  teamMembers?: string[];
  launchDate?: string;
  chain?: string;
}

interface ProjectState {
  projects: Project[];
  addProject: (project: Project) => void;
  updateProject: (id: string, updates: Partial<Project>) => void;
  updateProjectProgress: (id: string) => void;
  addContract: (projectId: string, contract: Contract) => void;
  removeContract: (projectId: string, contractId: string) => void;
}

export const useProjectStore = create<ProjectState>()(
  persist(
    (set) => ({
      projects: [],
      addProject: (project) =>
        set((state) => ({
          projects: [...state.projects, { ...project, contracts: [] }]
        })),
      updateProject: (id, updates) =>
        set((state) => ({
          projects: state.projects.map((project) =>
            project.id === id ? { ...project, ...updates } : project
          )
        })),
      updateProjectProgress: (id) =>
        set((state) => ({
          projects: state.projects.map((project) => {
            if (project.id === id) {
              const totalSteps = 10;
              const progress = (project.completedSteps.length / totalSteps) * 100;
              return { ...project, progress };
            }
            return project;
          })
        })),
      addContract: (projectId, contract) =>
        set((state) => ({
          projects: state.projects.map((project) =>
            project.id === projectId
              ? { ...project, contracts: [...(project.contracts || []), contract] }
              : project
          )
        })),
      removeContract: (projectId, contractId) =>
        set((state) => ({
          projects: state.projects.map((project) =>
            project.id === projectId
              ? {
                  ...project,
                  contracts: project.contracts.filter((c) => c.id !== contractId)
                }
              : project
          )
        }))
    }),
    {
      name: 'project-storage'
    }
  )
);

================
File: src/lib/store/useSocialStore.ts
================
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface SocialStats {
  twitter: {
    followers: number;
    engagement: number;
    connected: boolean;
  };
  discord: {
    members: number;
    active: number;
    connected: boolean;
  };
  telegram: {
    members: number;
    active: number;
    connected: boolean;
  };
}

interface SocialState {
  stats: SocialStats;
  updateStats: (platform: keyof SocialStats, stats: Partial<SocialStats[keyof SocialStats]>) => void;
  connectPlatform: (platform: keyof SocialStats) => void;
  disconnectPlatform: (platform: keyof SocialStats) => void;
}

export const useSocialStore = create<SocialState>()(
  persist(
    (set) => ({
      stats: {
        twitter: {
          followers: 0,
          engagement: 0,
          connected: false,
        },
        discord: {
          members: 0,
          active: 0,
          connected: false,
        },
        telegram: {
          members: 0,
          active: 0,
          connected: false,
        },
      },
      updateStats: (platform, stats) =>
        set((state) => ({
          stats: {
            ...state.stats,
            [platform]: {
              ...state.stats[platform],
              ...stats,
            },
          },
        })),
      connectPlatform: (platform) =>
        set((state) => ({
          stats: {
            ...state.stats,
            [platform]: {
              ...state.stats[platform],
              connected: true,
            },
          },
        })),
      disconnectPlatform: (platform) =>
        set((state) => ({
          stats: {
            ...state.stats,
            [platform]: {
              ...state.stats[platform],
              connected: false,
            },
          },
        })),
    }),
    {
      name: 'social-storage',
    }
  )
);

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: src/lib/web3.ts
================
import { createWeb3Modal } from '@web3modal/wagmi/react';
import { defaultWagmiConfig } from '@web3modal/wagmi/react/config';
import { mainnet, sepolia } from 'wagmi/chains';
import { QueryClient } from '@tanstack/react-query';

export const projectId = '73c1fcffe1db90bc4646c911d85247ff';

const metadata = {
  name: 'AI Launchpad',
  description: 'Web3 Startup Launchpad Platform',
  url: 'https://ailaunchpad.example',
  icons: ['https://avatars.githubusercontent.com/u/37784886']
};

const chains = [mainnet, sepolia];

export const wagmiConfig = defaultWagmiConfig({
  chains,
  projectId,
  metadata,
  enableWalletConnect: true,
  enableInjected: true,
  enableEIP6963: true,
  enableCoinbase: false, // Disabled to avoid COOP header issues
});

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: 1,
    },
  },
});

createWeb3Modal({
  wagmiConfig,
  projectId,
  chains,
  themeMode: 'dark',
  themeVariables: {
    '--w3m-accent': '#9333ea',
  },
});

================
File: src/pages/Community.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Globe, Rocket, Users, Star, ArrowUpRight, Calendar, Coins } from 'lucide-react';
import Button from '../components/ui/Button';
import AdvertiseModal from '../components/community/AdvertiseModal';
import IDOSection from '../components/community/IDOSection';
import { useProjectStore } from '../lib/store/useProjectStore';

const Community = () => {
  const [isAdvertiseModalOpen, setIsAdvertiseModalOpen] = useState(false);
  const projects = useProjectStore((state) => state.projects);
  const featuredProjects = projects.filter(p => p.isFeatured);
  const regularProjects = projects.filter(p => !p.isFeatured);

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-6xl mx-auto"
        >
          {/* Header */}
          <div className="text-center mb-16">
            <motion.h1
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-4xl md:text-5xl font-bold mb-6"
            >
              Discover Innovative Projects
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="text-xl text-gray-400 mb-8"
            >
              Explore and participate in the latest blockchain projects powered by AI
            </motion.p>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="flex flex-wrap justify-center gap-4"
            >
              <Button variant="primary" onClick={() => setIsAdvertiseModalOpen(true)}>
                <Rocket className="w-4 h-4 mr-2" />
                Advertise Your Launch
              </Button>
            </motion.div>
          </div>

          {/* IDO Section */}
          <IDOSection />

          {/* Featured Projects */}
          {featuredProjects.length > 0 && (
            <section className="mb-16">
              <h2 className="text-2xl font-bold mb-8 flex items-center">
                <Star className="w-5 h-5 mr-2 text-yellow-500" />
                Featured Launches
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {/* ... Featured Projects Content ... */}
              </div>
            </section>
          )}

          {/* Regular Projects */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {/* ... Regular Projects Content ... */}
          </div>
        </motion.div>
      </div>

      <AdvertiseModal
        isOpen={isAdvertiseModalOpen}
        onClose={() => setIsAdvertiseModalOpen(false)}
      />
    </div>
  );
};

export default Community;

================
File: src/pages/Dashboard.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useAccount } from 'wagmi';
import { Navigate } from 'react-router-dom';
import { Rocket, Shield, Code, Zap } from 'lucide-react';
import Button from '../components/ui/Button';
import ProjectList from '../components/dashboard/ProjectList';
import ActivityFeed from '../components/dashboard/ActivityFeed';
import QuickAction from '../components/dashboard/QuickAction';
import ResourceLinks from '../components/dashboard/ResourceLinks';
import NewProjectModal from '../components/dashboard/NewProjectModal';

const Dashboard = () => {
  const { isConnected } = useAccount();
  const [isNewProjectModalOpen, setIsNewProjectModalOpen] = useState(false);

  if (!isConnected) {
    return <Navigate to="/" />;
  }

  const handleQuickAction = (action: string) => {
    switch (action) {
      case 'deploy':
        window.location.href = '/launch';
        break;
      case 'audit':
        window.location.href = '/smart-contract-auditor';
        break;
      case 'code':
        window.location.href = '/token-builder';
        break;
      case 'optimize':
        window.location.href = '/project-manager';
        break;
    }
  };

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Projects Section */}
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">Your Projects</h2>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setIsNewProjectModalOpen(true)}
              >
                New Project
              </Button>
            </div>
            
            <ProjectList />
            <ActivityFeed />
          </div>

          {/* Sidebar */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.3 }}
            className="space-y-8"
          >
            {/* Quick Actions */}
            <section className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20">
              <h2 className="text-xl font-bold mb-4">Quick Actions</h2>
              <div className="grid grid-cols-2 gap-4">
                {[
                  { icon: <Rocket className="w-5 h-5" />, label: 'Deploy', action: 'deploy' },
                  { icon: <Shield className="w-5 h-5" />, label: 'Audit', action: 'audit' },
                  { icon: <Code className="w-5 h-5" />, label: 'Code', action: 'code' },
                  { icon: <Zap className="w-5 h-5" />, label: 'Optimize', action: 'optimize' },
                ].map((item, index) => (
                  <QuickAction
                    key={index}
                    icon={item.icon}
                    label={item.label}
                    onClick={() => handleQuickAction(item.action)}
                  />
                ))}
              </div>
            </section>

            <ResourceLinks />
          </motion.div>
        </div>
      </div>

      <NewProjectModal
        isOpen={isNewProjectModalOpen}
        onClose={() => setIsNewProjectModalOpen(false)}
      />
    </div>
  );
};

export default Dashboard;

================
File: src/pages/LandingPage.tsx
================
import React from 'react';
import Hero from '../components/Hero';
import Features from '../components/Features';
import Stats from '../components/Stats';
import ApplicationProcess from '../components/ApplicationProcess';
import Testimonials from '../components/Testimonials';
import CTA from '../components/CTA';

const LandingPage = () => {
  return (
    <>
      <Hero />
      <Features />
      <Stats />
      <ApplicationProcess />
      <Testimonials />
      <CTA />
    </>
  );
};

export default LandingPage;

================
File: src/pages/Launch.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Rocket } from 'lucide-react';
import Button from '../components/ui/Button';
import LaunchRequirements from '../components/launch/LaunchRequirements';
import BlockchainSelector from '../components/launch/BlockchainSelector';
import SocialConnector from '../components/launch/SocialConnector';
import Analytics from '../components/launch/Analytics';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';
import { useProjectStore } from '../lib/store/useProjectStore';

const Launch = () => {
  const [selectedChain, setSelectedChain] = useState('ethereum');
  const { currentProject, markStepComplete } = useCurrentProject();
  const { updateProject } = useProjectStore();

  const handleLaunch = async () => {
    if (!currentProject) return;

    try {
      // Update project status
      updateProject(currentProject.id, {
        status: 'Live',
        launchDate: new Date().toISOString(),
        chain: selectedChain,
      });

      // Mark launch step as complete
      markStepComplete('Project Launch', 'launch');

      // Show success message
      alert('Project successfully launched! Your project is now live on the community page.');
    } catch (error) {
      console.error('Launch failed:', error);
      alert('Failed to launch project. Please try again.');
    }
  };

  const isLaunchReady = currentProject?.completedSteps?.includes('Smart Contract Audit') &&
                        currentProject?.completedSteps?.includes('KYC Verification');

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-4xl mx-auto"
        >
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-4">Launch Your Project</h1>
            <p className="text-gray-400">Deploy your project and connect with the community</p>
          </div>

          <div className="grid gap-8">
            <LaunchRequirements />
            <BlockchainSelector selectedChain={selectedChain} onSelect={setSelectedChain} />
            <SocialConnector />
            <Analytics />

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5 }}
              className="flex justify-center"
            >
              <Button
                variant="primary"
                size="lg"
                className="w-full md:w-auto"
                onClick={handleLaunch}
                disabled={!isLaunchReady}
              >
                <Rocket className="w-5 h-5 mr-2" />
                {isLaunchReady ? 'Launch Project' : 'Complete Requirements to Launch'}
              </Button>
            </motion.div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default Launch;

================
File: src/pages/ProjectManager.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import ProjectOverview from '../components/project/ProjectOverview';
import TeamManagement from '../components/project/TeamManagement';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';

const ProjectManager = () => {
  const { currentProject } = useCurrentProject();

  if (!currentProject) {
    return (
      <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
        <div className="container mx-auto px-6">
          <div className="text-center py-12">
            <h1 className="text-3xl font-bold mb-4">No Project Selected</h1>
            <p className="text-gray-400">Please select a project from the dropdown menu to manage it.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-4xl mx-auto"
        >
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-4">Project Manager</h1>
            <p className="text-gray-400">Manage your project details and team members</p>
          </div>

          <div className="grid gap-8">
            <ProjectOverview />
            <TeamManagement />
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default ProjectManager;

================
File: src/pages/SmartContractAuditor.tsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search, AlertTriangle, CheckCircle, Code2, FileCode2, Upload, Loader } from 'lucide-react';
import Button from '../components/ui/Button';
import { useAIContext } from '../lib/ai/AIContext';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';
import AuditResults from '../components/audit/AuditResults';
import CodeEditor from '../components/audit/CodeEditor';
import ContractSelector from '../components/audit/ContractSelector';

const SmartContractAuditor = () => {
  const [code, setCode] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState<any>(null);
  const { analyzeCode } = useAIContext();
  const { currentProject, markStepComplete } = useCurrentProject();

  const handleAnalyze = async () => {
    if (!code.trim()) return;

    setIsAnalyzing(true);
    try {
      const analysis = await analyzeCode(code);
      setResults(analysis);
      
      if (currentProject) {
        markStepComplete('Smart Contract Audit', 'audit');
      }
    } catch (error) {
      console.error('Analysis failed:', error);
      alert('Failed to analyze contract. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      setCode(e.target?.result as string);
    };
    reader.readAsText(file);
  };

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-6xl mx-auto"
        >
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-4">Smart Contract Auditor</h1>
            <p className="text-gray-400">AI-powered smart contract analysis and security auditing</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Code Input Section */}
            <div className="space-y-8">
              {currentProject && <ContractSelector onSelect={(code) => setCode(code)} />}
              
              <motion.section
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
                className="bg-zinc-900/50 rounded-2xl p-6 border border-purple-900/20"
              >
                <h2 className="text-xl font-bold mb-6 flex items-center">
                  <Code2 className="w-5 h-5 mr-2 text-purple-500" />
                  Contract Code
                </h2>
                <div className="space-y-4">
                  <CodeEditor
                    value={code}
                    onChange={setCode}
                    placeholder="Paste your smart contract code here..."
                  />
                  <div className="flex gap-4">
                    <Button
                      variant="primary"
                      className="flex-1"
                      onClick={handleAnalyze}
                      disabled={isAnalyzing || !code.trim()}
                    >
                      {isAnalyzing ? (
                        <>
                          <Loader className="w-4 h-4 mr-2 animate-spin" />
                          Analyzing...
                        </>
                      ) : (
                        <>
                          <Search className="w-4 h-4 mr-2" />
                          Start Audit
                        </>
                      )}
                    </Button>
                    <label className="flex-shrink-0">
                      <input
                        type="file"
                        accept=".sol,.json,.txt"
                        onChange={handleFileUpload}
                        className="hidden"
                      />
                      <Button variant="outline" as="span">
                        <Upload className="w-4 h-4 mr-2" />
                        Upload File
                      </Button>
                    </label>
                  </div>
                </div>
              </motion.section>
            </div>

            {/* Analysis Results */}
            <div className="space-y-8">
              {results && <AuditResults results={results} />}
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default SmartContractAuditor;

================
File: src/pages/TokenBuilder.tsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Check, ChevronRight } from 'lucide-react';
import TokenBuilderForm from '../components/token/TokenBuilderForm';
import TokenomicsBuilder from '../components/token/TokenomicsBuilder';
import WhitePaperGenerator from '../components/token/WhitePaperGenerator';
import VestingSchedule from '../components/token/VestingSchedule';
import SecurityFeatures from '../components/token/SecurityFeatures';
import TokenManagement from '../components/token/TokenManagement';
import ContractTemplates from '../components/token/ContractTemplates';
import StoredContracts from '../components/token/StoredContracts';
import { useCurrentProject } from '../lib/hooks/useCurrentProject';

const steps = [
  { id: 'token', title: 'Token Configuration', component: TokenBuilderForm },
  { id: 'tokenomics', title: 'Tokenomics', component: TokenomicsBuilder },
  { id: 'vesting', title: 'Vesting Schedule', component: VestingSchedule },
  { id: 'security', title: 'Security Features', component: SecurityFeatures },
  { id: 'whitepaper', title: 'White Paper', component: WhitePaperGenerator },
];

const TokenBuilder = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const { currentProject } = useCurrentProject();
  const completedSteps = currentProject?.completedSteps || [];
  const hasToken = currentProject?.tokenConfig;

  const CurrentStepComponent = steps[currentStep].component;

  if (hasToken) {
    return (
      <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
        <div className="container mx-auto px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-4xl mx-auto"
          >
            <div className="mb-8">
              <h1 className="text-3xl font-bold mb-4">Token Management</h1>
              <p className="text-gray-400">Manage and monitor your token</p>
            </div>
            <div className="space-y-8">
              <TokenManagement />
              <StoredContracts />
            </div>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="pt-24 min-h-screen bg-gradient-to-b from-black to-purple-900/20">
      <div className="container mx-auto px-6">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-4xl mx-auto"
        >
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-4">Token Builder</h1>
            <p className="text-gray-400">Create your token with AI-powered smart contract generation</p>
          </div>

          {/* Contract Templates */}
          <div className="mb-8">
            <ContractTemplates />
          </div>

          {/* Progress Steps */}
          <div className="mb-8">
            <div className="flex items-center justify-between relative">
              {steps.map((step, index) => (
                <React.Fragment key={step.id}>
                  <button
                    onClick={() => setCurrentStep(index)}
                    className={`relative z-10 flex flex-col items-center ${
                      index <= currentStep ? 'cursor-pointer' : 'cursor-not-allowed opacity-50'
                    }`}
                  >
                    <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${
                      completedSteps.includes(step.id)
                        ? 'bg-purple-600 border-purple-600'
                        : index === currentStep
                        ? 'border-purple-600 bg-black'
                        : 'border-gray-600 bg-black'
                    }`}>
                      {completedSteps.includes(step.id) ? (
                        <Check className="w-5 h-5 text-white" />
                      ) : (
                        <span className="text-white">{index + 1}</span>
                      )}
                    </div>
                    <span className="absolute top-12 text-sm text-gray-400 whitespace-nowrap">
                      {step.title}
                    </span>
                  </button>
                  {index < steps.length - 1 && (
                    <div className={`flex-1 h-0.5 ${
                      index < currentStep ? 'bg-purple-600' : 'bg-gray-600'
                    }`} />
                  )}
                </React.Fragment>
              ))}
            </div>
          </div>

          {/* Step Content */}
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.2 }}
            >
              <CurrentStepComponent />
            </motion.div>
          </AnimatePresence>

          {/* Navigation Buttons */}
          <div className="mt-8 flex justify-between">
            <button
              onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}
              disabled={currentStep === 0}
              className={`px-6 py-2 rounded-lg border border-purple-600 text-purple-600 hover:bg-purple-600/10 transition-colors ${
                currentStep === 0 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              Previous
            </button>
            <button
              onClick={() => setCurrentStep(prev => Math.min(steps.length - 1, prev + 1))}
              disabled={currentStep === steps.length - 1}
              className={`px-6 py-2 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-colors flex items-center ${
                currentStep === steps.length - 1 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              Next
              <ChevronRight className="w-4 h-4 ml-2" />
            </button>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default TokenBuilder;

================
File: src/App.tsx
================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { WagmiConfig } from 'wagmi';
import { QueryClientProvider } from '@tanstack/react-query';
import { wagmiConfig, queryClient } from './lib/web3';
import { AIProvider } from './lib/ai/AIContext';
import Navbar from './components/Navbar';
import LandingPage from './pages/LandingPage';
import Dashboard from './pages/Dashboard';
import TokenBuilder from './pages/TokenBuilder';
import SmartContractAuditor from './pages/SmartContractAuditor';
import ProjectManager from './pages/ProjectManager';
import Launch from './pages/Launch';
import Community from './pages/Community';
import ProtectedRoute from './components/ProtectedRoute';
import ApplyForm from './components/ApplyForm';
import WalletApproval from './components/WalletApproval';
import ProjectContext from './components/ProjectContext';
import AIAssistant from './components/ai/AIAssistant';

function App() {
  const [isAIAssistantOpen, setIsAIAssistantOpen] = React.useState(false);

  return (
    <QueryClientProvider client={queryClient}>
      <WagmiConfig config={wagmiConfig}>
        <AIProvider>
          <Router>
            <main className="min-h-screen bg-black text-white">
              <WalletApproval />
              <ProjectContext />
              <Navbar onAIAssistantToggle={() => setIsAIAssistantOpen(!isAIAssistantOpen)} />
              <Routes>
                <Route path="/" element={<LandingPage />} />
                <Route path="/apply" element={<ApplyForm />} />
                <Route path="/dashboard" element={
                  <ProtectedRoute>
                    <Dashboard />
                  </ProtectedRoute>
                } />
                <Route path="/token-builder" element={
                  <ProtectedRoute>
                    <TokenBuilder />
                  </ProtectedRoute>
                } />
                <Route path="/smart-contract-auditor" element={
                  <ProtectedRoute>
                    <SmartContractAuditor />
                  </ProtectedRoute>
                } />
                <Route path="/project-manager" element={
                  <ProtectedRoute>
                    <ProjectManager />
                  </ProtectedRoute>
                } />
                <Route path="/launch" element={
                  <ProtectedRoute>
                    <Launch />
                  </ProtectedRoute>
                } />
                <Route path="/community" element={<Community />} />
              </Routes>
              <AIAssistant isOpen={isAIAssistantOpen} onClose={() => setIsAIAssistantOpen(false)} />
            </main>
          </Router>
        </AIProvider>
      </WagmiConfig>
    </QueryClientProvider>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/main.tsx
================
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const rootElement = document.getElementById('root');
if (!rootElement) throw new Error('Root element not found');

createRoot(rootElement).render(
  <StrictMode>
    <App />
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .env.example
================
VITE_OPENAI_API_KEY=your_api_key_here
VITE_PROJECT_ID=your_project_id_here
VITE_DISCORD_BOT_TOKEN=your_discord_bot_token_here
VITE_TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Dependencies
node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Vercel
.vercel

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Launchpad - Web3 Startup Platform</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "ai-launchpad",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-spring/web": "^9.7.3",
    "@tanstack/react-query": "^5.17.19",
    "@web3modal/wagmi": "^4.0.11",
    "ai": "^2.2.35",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "discord.js": "^14.14.1",
    "ethers": "^6.11.1",
    "framer-motion": "^11.0.8",
    "lucide-react": "^0.344.0",
    "node-telegram-bot-api": "^0.65.1",
    "openai": "^4.28.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.2",
    "react-tweet": "^3.2.0",
    "repomix": "^0.2.5",
    "tailwind-merge": "^2.2.1",
    "uuid": "^9.0.1",
    "viem": "^2.7.15",
    "wagmi": "^2.5.7",
    "zod": "^3.23.8",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@types/node": "^20.11.24",
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "@types/uuid": "^9.0.8",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.18",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.3.3",
    "vite": "^5.1.0"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
# AILaunchr

[Edit in StackBlitz next generation editor ⚡️](https://stackblitz.com/~/github.com/RectiFlex/AILaunchr)

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      container: {
        center: true,
        padding: '2rem',
        screens: {
          '2xl': '1400px',
        },
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
      },
      keyframes: {
        'float': {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-20px)' },
        }
      },
      animation: {
        'float': 'float 6s ease-in-out infinite',
      }
    },
  },
  plugins: [],
};

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    /* Path aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vercel.json
================
{
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "framework": "vite",
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/index.html"
    }
  ],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Frame-Options",
          "value": "DENY"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        }
      ]
    }
  ]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    include: [
      '@react-spring/web',
      'framer-motion',
      'lucide-react',
      'wagmi',
      'viem',
      '@web3modal/wagmi',
      'react-router-dom'
    ]
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')
    }
  },
  server: {
    host: true,
    port: 5173
  }
});
